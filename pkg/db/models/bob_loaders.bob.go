// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
)

var Preload = getPreloaders()

type preloaders struct {
	AnalysisProto  analysisProtoPreloader
	CCar           cCarPreloader
	CCarClass      cCarClassPreloader
	CCarDriver     cCarDriverPreloader
	CCarEntry      cCarEntryPreloader
	CCarTeam       cCarTeamPreloader
	CarStateProto  carStateProtoPreloader
	Event          eventPreloader
	EventExt       eventExtPreloader
	MSGStateProto  msgStateProtoPreloader
	RaceStateProto raceStateProtoPreloader
	RSInfo         rsInfoPreloader
	SpeedmapProto  speedmapProtoPreloader
	Tenant         tenantPreloader
	Track          trackPreloader
}

func getPreloaders() preloaders {
	return preloaders{
		AnalysisProto:  buildAnalysisProtoPreloader(),
		CCar:           buildCCarPreloader(),
		CCarClass:      buildCCarClassPreloader(),
		CCarDriver:     buildCCarDriverPreloader(),
		CCarEntry:      buildCCarEntryPreloader(),
		CCarTeam:       buildCCarTeamPreloader(),
		CarStateProto:  buildCarStateProtoPreloader(),
		Event:          buildEventPreloader(),
		EventExt:       buildEventExtPreloader(),
		MSGStateProto:  buildMSGStateProtoPreloader(),
		RaceStateProto: buildRaceStateProtoPreloader(),
		RSInfo:         buildRSInfoPreloader(),
		SpeedmapProto:  buildSpeedmapProtoPreloader(),
		Tenant:         buildTenantPreloader(),
		Track:          buildTrackPreloader(),
	}
}

var (
	SelectThenLoad = getThenLoaders[*dialect.SelectQuery]()
	InsertThenLoad = getThenLoaders[*dialect.InsertQuery]()
	UpdateThenLoad = getThenLoaders[*dialect.UpdateQuery]()
)

type thenLoaders[Q orm.Loadable] struct {
	AnalysisProto  analysisProtoThenLoader[Q]
	CCar           cCarThenLoader[Q]
	CCarClass      cCarClassThenLoader[Q]
	CCarDriver     cCarDriverThenLoader[Q]
	CCarEntry      cCarEntryThenLoader[Q]
	CCarTeam       cCarTeamThenLoader[Q]
	CarStateProto  carStateProtoThenLoader[Q]
	Event          eventThenLoader[Q]
	EventExt       eventExtThenLoader[Q]
	MSGStateProto  msgStateProtoThenLoader[Q]
	RaceStateProto raceStateProtoThenLoader[Q]
	RSInfo         rsInfoThenLoader[Q]
	SpeedmapProto  speedmapProtoThenLoader[Q]
	Tenant         tenantThenLoader[Q]
	Track          trackThenLoader[Q]
}

func getThenLoaders[Q orm.Loadable]() thenLoaders[Q] {
	return thenLoaders[Q]{
		AnalysisProto:  buildAnalysisProtoThenLoader[Q](),
		CCar:           buildCCarThenLoader[Q](),
		CCarClass:      buildCCarClassThenLoader[Q](),
		CCarDriver:     buildCCarDriverThenLoader[Q](),
		CCarEntry:      buildCCarEntryThenLoader[Q](),
		CCarTeam:       buildCCarTeamThenLoader[Q](),
		CarStateProto:  buildCarStateProtoThenLoader[Q](),
		Event:          buildEventThenLoader[Q](),
		EventExt:       buildEventExtThenLoader[Q](),
		MSGStateProto:  buildMSGStateProtoThenLoader[Q](),
		RaceStateProto: buildRaceStateProtoThenLoader[Q](),
		RSInfo:         buildRSInfoThenLoader[Q](),
		SpeedmapProto:  buildSpeedmapProtoThenLoader[Q](),
		Tenant:         buildTenantThenLoader[Q](),
		Track:          buildTrackThenLoader[Q](),
	}
}

func thenLoadBuilder[Q orm.Loadable, T any](name string, f func(context.Context, bob.Executor, T, ...bob.Mod[*dialect.SelectQuery]) error) func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
	return func(queryMods ...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
		return func(ctx context.Context, exec bob.Executor, retrieved any) error {
			loader, isLoader := retrieved.(T)
			if !isLoader {
				return fmt.Errorf("object %T cannot load %q", retrieved, name)
			}

			err := f(ctx, exec, loader, queryMods...)

			// Don't cause an issue due to missing relationships
			if errors.Is(err, sql.ErrNoRows) {
				return nil
			}

			return err
		}
	}
}
