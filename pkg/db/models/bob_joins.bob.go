// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"hash/maphash"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
)

var (
	SelectJoins = getJoins[*dialect.SelectQuery]()
	UpdateJoins = getJoins[*dialect.UpdateQuery]()
	DeleteJoins = getJoins[*dialect.DeleteQuery]()
)

type joinSet[Q interface{ aliasedAs(string) Q }] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

func (j joinSet[Q]) AliasedAs(alias string) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: j.InnerJoin.aliasedAs(alias),
		LeftJoin:  j.LeftJoin.aliasedAs(alias),
		RightJoin: j.RightJoin.aliasedAs(alias),
	}
}

type joins[Q dialect.Joinable] struct {
	AnalysisProtos  joinSet[analysisProtoJoins[Q]]
	CCars           joinSet[cCarJoins[Q]]
	CCarClasses     joinSet[cCarClassJoins[Q]]
	CCarDrivers     joinSet[cCarDriverJoins[Q]]
	CCarEntries     joinSet[cCarEntryJoins[Q]]
	CCarTeams       joinSet[cCarTeamJoins[Q]]
	CarStateProtos  joinSet[carStateProtoJoins[Q]]
	Events          joinSet[eventJoins[Q]]
	EventExts       joinSet[eventExtJoins[Q]]
	MSGStateProtos  joinSet[msgStateProtoJoins[Q]]
	RaceStateProtos joinSet[raceStateProtoJoins[Q]]
	RSInfos         joinSet[rsInfoJoins[Q]]
	SpeedmapProtos  joinSet[speedmapProtoJoins[Q]]
	Tenants         joinSet[tenantJoins[Q]]
	Tracks          joinSet[trackJoins[Q]]
}

func buildJoinSet[Q interface{ aliasedAs(string) Q }, C any, F func(C, string) Q](c C, f F) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: f(c, clause.InnerJoin),
		LeftJoin:  f(c, clause.LeftJoin),
		RightJoin: f(c, clause.RightJoin),
	}
}

func getJoins[Q dialect.Joinable]() joins[Q] {
	return joins[Q]{
		AnalysisProtos:  buildJoinSet[analysisProtoJoins[Q]](AnalysisProtos.Columns, buildAnalysisProtoJoins),
		CCars:           buildJoinSet[cCarJoins[Q]](CCars.Columns, buildCCarJoins),
		CCarClasses:     buildJoinSet[cCarClassJoins[Q]](CCarClasses.Columns, buildCCarClassJoins),
		CCarDrivers:     buildJoinSet[cCarDriverJoins[Q]](CCarDrivers.Columns, buildCCarDriverJoins),
		CCarEntries:     buildJoinSet[cCarEntryJoins[Q]](CCarEntries.Columns, buildCCarEntryJoins),
		CCarTeams:       buildJoinSet[cCarTeamJoins[Q]](CCarTeams.Columns, buildCCarTeamJoins),
		CarStateProtos:  buildJoinSet[carStateProtoJoins[Q]](CarStateProtos.Columns, buildCarStateProtoJoins),
		Events:          buildJoinSet[eventJoins[Q]](Events.Columns, buildEventJoins),
		EventExts:       buildJoinSet[eventExtJoins[Q]](EventExts.Columns, buildEventExtJoins),
		MSGStateProtos:  buildJoinSet[msgStateProtoJoins[Q]](MSGStateProtos.Columns, buildMSGStateProtoJoins),
		RaceStateProtos: buildJoinSet[raceStateProtoJoins[Q]](RaceStateProtos.Columns, buildRaceStateProtoJoins),
		RSInfos:         buildJoinSet[rsInfoJoins[Q]](RSInfos.Columns, buildRSInfoJoins),
		SpeedmapProtos:  buildJoinSet[speedmapProtoJoins[Q]](SpeedmapProtos.Columns, buildSpeedmapProtoJoins),
		Tenants:         buildJoinSet[tenantJoins[Q]](Tenants.Columns, buildTenantJoins),
		Tracks:          buildJoinSet[trackJoins[Q]](Tracks.Columns, buildTrackJoins),
	}
}

type modAs[Q any, C interface{ AliasedAs(string) C }] struct {
	c C
	f func(C) bob.Mod[Q]
}

func (m modAs[Q, C]) Apply(q Q) {
	m.f(m.c).Apply(q)
}

func (m modAs[Q, C]) AliasedAs(alias string) bob.Mod[Q] {
	m.c = m.c.AliasedAs(alias)
	return m
}

func randInt() int64 {
	out := int64(new(maphash.Hash).Sum64())

	if out < 0 {
		return -out % 10000
	}

	return out % 10000
}
