// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// CCarTeam is an object representing the database table.
type CCarTeam struct {
	ID          int32  `db:"id,pk" `
	CCarEntryID int32  `db:"c_car_entry_id" `
	TeamID      int32  `db:"team_id" `
	Name        string `db:"name" `

	R cCarTeamR `db:"-" `
}

// CCarTeamSlice is an alias for a slice of pointers to CCarTeam.
// This should almost always be used instead of []*CCarTeam.
type CCarTeamSlice []*CCarTeam

// CCarTeams contains methods to work with the c_car_team table
var CCarTeams = psql.NewTablex[*CCarTeam, CCarTeamSlice, *CCarTeamSetter]("", "c_car_team", buildCCarTeamColumns("c_car_team"))

// CCarTeamsQuery is a query on the c_car_team table
type CCarTeamsQuery = *psql.ViewQuery[*CCarTeam, CCarTeamSlice]

// cCarTeamR is where relationships are stored.
type cCarTeamR struct {
	CCarEntry *CCarEntry // c_car_team.c_car_team_car_entry_id_fkey
}

func buildCCarTeamColumns(alias string) cCarTeamColumns {
	return cCarTeamColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "c_car_entry_id", "team_id", "name",
		).WithParent("c_car_team"),
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		CCarEntryID: psql.Quote(alias, "c_car_entry_id"),
		TeamID:      psql.Quote(alias, "team_id"),
		Name:        psql.Quote(alias, "name"),
	}
}

type cCarTeamColumns struct {
	expr.ColumnsExpr
	tableAlias  string
	ID          psql.Expression
	CCarEntryID psql.Expression
	TeamID      psql.Expression
	Name        psql.Expression
}

func (c cCarTeamColumns) Alias() string {
	return c.tableAlias
}

func (cCarTeamColumns) AliasedAs(alias string) cCarTeamColumns {
	return buildCCarTeamColumns(alias)
}

// CCarTeamSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CCarTeamSetter struct {
	ID          omit.Val[int32]  `db:"id,pk" `
	CCarEntryID omit.Val[int32]  `db:"c_car_entry_id" `
	TeamID      omit.Val[int32]  `db:"team_id" `
	Name        omit.Val[string] `db:"name" `
}

func (s CCarTeamSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.CCarEntryID.IsValue() {
		vals = append(vals, "c_car_entry_id")
	}
	if s.TeamID.IsValue() {
		vals = append(vals, "team_id")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	return vals
}

func (s CCarTeamSetter) Overwrite(t *CCarTeam) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.CCarEntryID.IsValue() {
		t.CCarEntryID = s.CCarEntryID.MustGet()
	}
	if s.TeamID.IsValue() {
		t.TeamID = s.TeamID.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
}

func (s *CCarTeamSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return CCarTeams.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.CCarEntryID.IsValue() {
			vals[1] = psql.Arg(s.CCarEntryID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.TeamID.IsValue() {
			vals[2] = psql.Arg(s.TeamID.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Name.IsValue() {
			vals[3] = psql.Arg(s.Name.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s CCarTeamSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s CCarTeamSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.CCarEntryID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "c_car_entry_id")...),
			psql.Arg(s.CCarEntryID),
		}})
	}

	if s.TeamID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "team_id")...),
			psql.Arg(s.TeamID),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	return exprs
}

// FindCCarTeam retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCCarTeam(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*CCarTeam, error) {
	if len(cols) == 0 {
		return CCarTeams.Query(
			sm.Where(CCarTeams.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return CCarTeams.Query(
		sm.Where(CCarTeams.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(CCarTeams.Columns.Only(cols...)),
	).One(ctx, exec)
}

// CCarTeamExists checks the presence of a single record by primary key
func CCarTeamExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return CCarTeams.Query(
		sm.Where(CCarTeams.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after CCarTeam is retrieved from the database
func (o *CCarTeam) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCarTeams.AfterSelectHooks.RunHooks(ctx, exec, CCarTeamSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = CCarTeams.AfterInsertHooks.RunHooks(ctx, exec, CCarTeamSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = CCarTeams.AfterUpdateHooks.RunHooks(ctx, exec, CCarTeamSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = CCarTeams.AfterDeleteHooks.RunHooks(ctx, exec, CCarTeamSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the CCarTeam
func (o *CCarTeam) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *CCarTeam) pkEQ() dialect.Expression {
	return psql.Quote("c_car_team", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the CCarTeam
func (o *CCarTeam) Update(ctx context.Context, exec bob.Executor, s *CCarTeamSetter) error {
	v, err := CCarTeams.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single CCarTeam record with an executor
func (o *CCarTeam) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := CCarTeams.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the CCarTeam using the executor
func (o *CCarTeam) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := CCarTeams.Query(
		sm.Where(CCarTeams.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CCarTeamSlice is retrieved from the database
func (o CCarTeamSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCarTeams.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = CCarTeams.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = CCarTeams.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = CCarTeams.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CCarTeamSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("c_car_team", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CCarTeamSlice) copyMatchingRows(from ...*CCarTeam) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CCarTeamSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCarTeams.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCarTeam:
				o.copyMatchingRows(retrieved)
			case []*CCarTeam:
				o.copyMatchingRows(retrieved...)
			case CCarTeamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCarTeam or a slice of CCarTeam
				// then run the AfterUpdateHooks on the slice
				_, err = CCarTeams.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CCarTeamSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCarTeams.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCarTeam:
				o.copyMatchingRows(retrieved)
			case []*CCarTeam:
				o.copyMatchingRows(retrieved...)
			case CCarTeamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCarTeam or a slice of CCarTeam
				// then run the AfterDeleteHooks on the slice
				_, err = CCarTeams.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CCarTeamSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CCarTeamSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCarTeams.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o CCarTeamSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCarTeams.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CCarTeamSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := CCarTeams.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CCarEntry starts a query for related objects on c_car_entry
func (o *CCarTeam) CCarEntry(mods ...bob.Mod[*dialect.SelectQuery]) CCarEntriesQuery {
	return CCarEntries.Query(append(mods,
		sm.Where(CCarEntries.Columns.ID.EQ(psql.Arg(o.CCarEntryID))),
	)...)
}

func (os CCarTeamSlice) CCarEntry(mods ...bob.Mod[*dialect.SelectQuery]) CCarEntriesQuery {
	pkCCarEntryID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkCCarEntryID = append(pkCCarEntryID, o.CCarEntryID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkCCarEntryID), "integer[]")),
	))

	return CCarEntries.Query(append(mods,
		sm.Where(psql.Group(CCarEntries.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachCCarTeamCCarEntry0(ctx context.Context, exec bob.Executor, count int, cCarTeam0 *CCarTeam, cCarEntry1 *CCarEntry) (*CCarTeam, error) {
	setter := &CCarTeamSetter{
		CCarEntryID: omit.From(cCarEntry1.ID),
	}

	err := cCarTeam0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarTeamCCarEntry0: %w", err)
	}

	return cCarTeam0, nil
}

func (cCarTeam0 *CCarTeam) InsertCCarEntry(ctx context.Context, exec bob.Executor, related *CCarEntrySetter) error {
	cCarEntry1, err := CCarEntries.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCCarTeamCCarEntry0(ctx, exec, 1, cCarTeam0, cCarEntry1)
	if err != nil {
		return err
	}

	cCarTeam0.R.CCarEntry = cCarEntry1

	cCarEntry1.R.CCarTeams = append(cCarEntry1.R.CCarTeams, cCarTeam0)

	return nil
}

func (cCarTeam0 *CCarTeam) AttachCCarEntry(ctx context.Context, exec bob.Executor, cCarEntry1 *CCarEntry) error {
	var err error

	_, err = attachCCarTeamCCarEntry0(ctx, exec, 1, cCarTeam0, cCarEntry1)
	if err != nil {
		return err
	}

	cCarTeam0.R.CCarEntry = cCarEntry1

	cCarEntry1.R.CCarTeams = append(cCarEntry1.R.CCarTeams, cCarTeam0)

	return nil
}

type cCarTeamWhere[Q psql.Filterable] struct {
	ID          psql.WhereMod[Q, int32]
	CCarEntryID psql.WhereMod[Q, int32]
	TeamID      psql.WhereMod[Q, int32]
	Name        psql.WhereMod[Q, string]
}

func (cCarTeamWhere[Q]) AliasedAs(alias string) cCarTeamWhere[Q] {
	return buildCCarTeamWhere[Q](buildCCarTeamColumns(alias))
}

func buildCCarTeamWhere[Q psql.Filterable](cols cCarTeamColumns) cCarTeamWhere[Q] {
	return cCarTeamWhere[Q]{
		ID:          psql.Where[Q, int32](cols.ID),
		CCarEntryID: psql.Where[Q, int32](cols.CCarEntryID),
		TeamID:      psql.Where[Q, int32](cols.TeamID),
		Name:        psql.Where[Q, string](cols.Name),
	}
}

func (o *CCarTeam) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CCarEntry":
		rel, ok := retrieved.(*CCarEntry)
		if !ok {
			return fmt.Errorf("cCarTeam cannot load %T as %q", retrieved, name)
		}

		o.R.CCarEntry = rel

		if rel != nil {
			rel.R.CCarTeams = CCarTeamSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("cCarTeam has no relationship %q", name)
	}
}

type cCarTeamPreloader struct {
	CCarEntry func(...psql.PreloadOption) psql.Preloader
}

func buildCCarTeamPreloader() cCarTeamPreloader {
	return cCarTeamPreloader{
		CCarEntry: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*CCarEntry, CCarEntrySlice](psql.PreloadRel{
				Name: "CCarEntry",
				Sides: []psql.PreloadSide{
					{
						From:        CCarTeams,
						To:          CCarEntries,
						FromColumns: []string{"c_car_entry_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, CCarEntries.Columns.Names(), opts...)
		},
	}
}

type cCarTeamThenLoader[Q orm.Loadable] struct {
	CCarEntry func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildCCarTeamThenLoader[Q orm.Loadable]() cCarTeamThenLoader[Q] {
	type CCarEntryLoadInterface interface {
		LoadCCarEntry(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return cCarTeamThenLoader[Q]{
		CCarEntry: thenLoadBuilder[Q](
			"CCarEntry",
			func(ctx context.Context, exec bob.Executor, retrieved CCarEntryLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCarEntry(ctx, exec, mods...)
			},
		),
	}
}

// LoadCCarEntry loads the cCarTeam's CCarEntry into the .R struct
func (o *CCarTeam) LoadCCarEntry(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCarEntry = nil

	related, err := o.CCarEntry(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CCarTeams = CCarTeamSlice{o}

	o.R.CCarEntry = related
	return nil
}

// LoadCCarEntry loads the cCarTeam's CCarEntry into the .R struct
func (os CCarTeamSlice) LoadCCarEntry(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCarEntries, err := os.CCarEntry(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCarEntries {

			if !(o.CCarEntryID == rel.ID) {
				continue
			}

			rel.R.CCarTeams = append(rel.R.CCarTeams, o)

			o.R.CCarEntry = rel
			break
		}
	}

	return nil
}

type cCarTeamJoins[Q dialect.Joinable] struct {
	typ       string
	CCarEntry modAs[Q, cCarEntryColumns]
}

func (j cCarTeamJoins[Q]) aliasedAs(alias string) cCarTeamJoins[Q] {
	return buildCCarTeamJoins[Q](buildCCarTeamColumns(alias), j.typ)
}

func buildCCarTeamJoins[Q dialect.Joinable](cols cCarTeamColumns, typ string) cCarTeamJoins[Q] {
	return cCarTeamJoins[Q]{
		typ: typ,
		CCarEntry: modAs[Q, cCarEntryColumns]{
			c: CCarEntries.Columns,
			f: func(to cCarEntryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCarEntries.Name().As(to.Alias())).On(
						to.ID.EQ(cols.CCarEntryID),
					))
				}

				return mods
			},
		},
	}
}
