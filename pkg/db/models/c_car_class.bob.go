// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// CCarClass is an object representing the database table.
type CCarClass struct {
	ID         int32  `db:"id,pk" `
	EventID    int32  `db:"event_id" `
	Name       string `db:"name" `
	CarClassID int32  `db:"car_class_id" `

	R cCarClassR `db:"-" `
}

// CCarClassSlice is an alias for a slice of pointers to CCarClass.
// This should almost always be used instead of []*CCarClass.
type CCarClassSlice []*CCarClass

// CCarClasses contains methods to work with the c_car_class table
var CCarClasses = psql.NewTablex[*CCarClass, CCarClassSlice, *CCarClassSetter]("", "c_car_class", buildCCarClassColumns("c_car_class"))

// CCarClassesQuery is a query on the c_car_class table
type CCarClassesQuery = *psql.ViewQuery[*CCarClass, CCarClassSlice]

// cCarClassR is where relationships are stored.
type cCarClassR struct {
	CCars CCarSlice // c_car.c_car_class_id_fkey
	Event *Event    // c_car_class.c_car_class_event_id_fkey
}

func buildCCarClassColumns(alias string) cCarClassColumns {
	return cCarClassColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "event_id", "name", "car_class_id",
		).WithParent("c_car_class"),
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		EventID:    psql.Quote(alias, "event_id"),
		Name:       psql.Quote(alias, "name"),
		CarClassID: psql.Quote(alias, "car_class_id"),
	}
}

type cCarClassColumns struct {
	expr.ColumnsExpr
	tableAlias string
	ID         psql.Expression
	EventID    psql.Expression
	Name       psql.Expression
	CarClassID psql.Expression
}

func (c cCarClassColumns) Alias() string {
	return c.tableAlias
}

func (cCarClassColumns) AliasedAs(alias string) cCarClassColumns {
	return buildCCarClassColumns(alias)
}

// CCarClassSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CCarClassSetter struct {
	ID         omit.Val[int32]  `db:"id,pk" `
	EventID    omit.Val[int32]  `db:"event_id" `
	Name       omit.Val[string] `db:"name" `
	CarClassID omit.Val[int32]  `db:"car_class_id" `
}

func (s CCarClassSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.EventID.IsValue() {
		vals = append(vals, "event_id")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	if s.CarClassID.IsValue() {
		vals = append(vals, "car_class_id")
	}
	return vals
}

func (s CCarClassSetter) Overwrite(t *CCarClass) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.EventID.IsValue() {
		t.EventID = s.EventID.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
	if s.CarClassID.IsValue() {
		t.CarClassID = s.CarClassID.MustGet()
	}
}

func (s *CCarClassSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return CCarClasses.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.EventID.IsValue() {
			vals[1] = psql.Arg(s.EventID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Name.IsValue() {
			vals[2] = psql.Arg(s.Name.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.CarClassID.IsValue() {
			vals[3] = psql.Arg(s.CarClassID.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s CCarClassSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s CCarClassSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.EventID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_id")...),
			psql.Arg(s.EventID),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.CarClassID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "car_class_id")...),
			psql.Arg(s.CarClassID),
		}})
	}

	return exprs
}

// FindCCarClass retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCCarClass(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*CCarClass, error) {
	if len(cols) == 0 {
		return CCarClasses.Query(
			sm.Where(CCarClasses.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return CCarClasses.Query(
		sm.Where(CCarClasses.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(CCarClasses.Columns.Only(cols...)),
	).One(ctx, exec)
}

// CCarClassExists checks the presence of a single record by primary key
func CCarClassExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return CCarClasses.Query(
		sm.Where(CCarClasses.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after CCarClass is retrieved from the database
func (o *CCarClass) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCarClasses.AfterSelectHooks.RunHooks(ctx, exec, CCarClassSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = CCarClasses.AfterInsertHooks.RunHooks(ctx, exec, CCarClassSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = CCarClasses.AfterUpdateHooks.RunHooks(ctx, exec, CCarClassSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = CCarClasses.AfterDeleteHooks.RunHooks(ctx, exec, CCarClassSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the CCarClass
func (o *CCarClass) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *CCarClass) pkEQ() dialect.Expression {
	return psql.Quote("c_car_class", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the CCarClass
func (o *CCarClass) Update(ctx context.Context, exec bob.Executor, s *CCarClassSetter) error {
	v, err := CCarClasses.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single CCarClass record with an executor
func (o *CCarClass) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := CCarClasses.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the CCarClass using the executor
func (o *CCarClass) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := CCarClasses.Query(
		sm.Where(CCarClasses.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CCarClassSlice is retrieved from the database
func (o CCarClassSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCarClasses.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = CCarClasses.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = CCarClasses.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = CCarClasses.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CCarClassSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("c_car_class", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CCarClassSlice) copyMatchingRows(from ...*CCarClass) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CCarClassSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCarClasses.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCarClass:
				o.copyMatchingRows(retrieved)
			case []*CCarClass:
				o.copyMatchingRows(retrieved...)
			case CCarClassSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCarClass or a slice of CCarClass
				// then run the AfterUpdateHooks on the slice
				_, err = CCarClasses.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CCarClassSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCarClasses.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCarClass:
				o.copyMatchingRows(retrieved)
			case []*CCarClass:
				o.copyMatchingRows(retrieved...)
			case CCarClassSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCarClass or a slice of CCarClass
				// then run the AfterDeleteHooks on the slice
				_, err = CCarClasses.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CCarClassSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CCarClassSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCarClasses.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o CCarClassSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCarClasses.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CCarClassSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := CCarClasses.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CCars starts a query for related objects on c_car
func (o *CCarClass) CCars(mods ...bob.Mod[*dialect.SelectQuery]) CCarsQuery {
	return CCars.Query(append(mods,
		sm.Where(CCars.Columns.CCarClassID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os CCarClassSlice) CCars(mods ...bob.Mod[*dialect.SelectQuery]) CCarsQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return CCars.Query(append(mods,
		sm.Where(psql.Group(CCars.Columns.CCarClassID).OP("IN", PKArgExpr)),
	)...)
}

// Event starts a query for related objects on event
func (o *CCarClass) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(Events.Columns.ID.EQ(psql.Arg(o.EventID))),
	)...)
}

func (os CCarClassSlice) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	pkEventID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkEventID = append(pkEventID, o.EventID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkEventID), "integer[]")),
	))

	return Events.Query(append(mods,
		sm.Where(psql.Group(Events.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func insertCCarClassCCars0(ctx context.Context, exec bob.Executor, cCars1 []*CCarSetter, cCarClass0 *CCarClass) (CCarSlice, error) {
	for i := range cCars1 {
		cCars1[i].CCarClassID = omit.From(cCarClass0.ID)
	}

	ret, err := CCars.Insert(bob.ToMods(cCars1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertCCarClassCCars0: %w", err)
	}

	return ret, nil
}

func attachCCarClassCCars0(ctx context.Context, exec bob.Executor, count int, cCars1 CCarSlice, cCarClass0 *CCarClass) (CCarSlice, error) {
	setter := &CCarSetter{
		CCarClassID: omit.From(cCarClass0.ID),
	}

	err := cCars1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarClassCCars0: %w", err)
	}

	return cCars1, nil
}

func (cCarClass0 *CCarClass) InsertCCars(ctx context.Context, exec bob.Executor, related ...*CCarSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	cCars1, err := insertCCarClassCCars0(ctx, exec, related, cCarClass0)
	if err != nil {
		return err
	}

	cCarClass0.R.CCars = append(cCarClass0.R.CCars, cCars1...)

	for _, rel := range cCars1 {
		rel.R.CCarClass = cCarClass0
	}
	return nil
}

func (cCarClass0 *CCarClass) AttachCCars(ctx context.Context, exec bob.Executor, related ...*CCar) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	cCars1 := CCarSlice(related)

	_, err = attachCCarClassCCars0(ctx, exec, len(related), cCars1, cCarClass0)
	if err != nil {
		return err
	}

	cCarClass0.R.CCars = append(cCarClass0.R.CCars, cCars1...)

	for _, rel := range related {
		rel.R.CCarClass = cCarClass0
	}

	return nil
}

func attachCCarClassEvent0(ctx context.Context, exec bob.Executor, count int, cCarClass0 *CCarClass, event1 *Event) (*CCarClass, error) {
	setter := &CCarClassSetter{
		EventID: omit.From(event1.ID),
	}

	err := cCarClass0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarClassEvent0: %w", err)
	}

	return cCarClass0, nil
}

func (cCarClass0 *CCarClass) InsertEvent(ctx context.Context, exec bob.Executor, related *EventSetter) error {
	event1, err := Events.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCCarClassEvent0(ctx, exec, 1, cCarClass0, event1)
	if err != nil {
		return err
	}

	cCarClass0.R.Event = event1

	event1.R.CCarClasses = append(event1.R.CCarClasses, cCarClass0)

	return nil
}

func (cCarClass0 *CCarClass) AttachEvent(ctx context.Context, exec bob.Executor, event1 *Event) error {
	var err error

	_, err = attachCCarClassEvent0(ctx, exec, 1, cCarClass0, event1)
	if err != nil {
		return err
	}

	cCarClass0.R.Event = event1

	event1.R.CCarClasses = append(event1.R.CCarClasses, cCarClass0)

	return nil
}

type cCarClassWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, int32]
	EventID    psql.WhereMod[Q, int32]
	Name       psql.WhereMod[Q, string]
	CarClassID psql.WhereMod[Q, int32]
}

func (cCarClassWhere[Q]) AliasedAs(alias string) cCarClassWhere[Q] {
	return buildCCarClassWhere[Q](buildCCarClassColumns(alias))
}

func buildCCarClassWhere[Q psql.Filterable](cols cCarClassColumns) cCarClassWhere[Q] {
	return cCarClassWhere[Q]{
		ID:         psql.Where[Q, int32](cols.ID),
		EventID:    psql.Where[Q, int32](cols.EventID),
		Name:       psql.Where[Q, string](cols.Name),
		CarClassID: psql.Where[Q, int32](cols.CarClassID),
	}
}

func (o *CCarClass) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CCars":
		rels, ok := retrieved.(CCarSlice)
		if !ok {
			return fmt.Errorf("cCarClass cannot load %T as %q", retrieved, name)
		}

		o.R.CCars = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CCarClass = o
			}
		}
		return nil
	case "Event":
		rel, ok := retrieved.(*Event)
		if !ok {
			return fmt.Errorf("cCarClass cannot load %T as %q", retrieved, name)
		}

		o.R.Event = rel

		if rel != nil {
			rel.R.CCarClasses = CCarClassSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("cCarClass has no relationship %q", name)
	}
}

type cCarClassPreloader struct {
	Event func(...psql.PreloadOption) psql.Preloader
}

func buildCCarClassPreloader() cCarClassPreloader {
	return cCarClassPreloader{
		Event: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Event, EventSlice](psql.PreloadRel{
				Name: "Event",
				Sides: []psql.PreloadSide{
					{
						From:        CCarClasses,
						To:          Events,
						FromColumns: []string{"event_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Events.Columns.Names(), opts...)
		},
	}
}

type cCarClassThenLoader[Q orm.Loadable] struct {
	CCars func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Event func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildCCarClassThenLoader[Q orm.Loadable]() cCarClassThenLoader[Q] {
	type CCarsLoadInterface interface {
		LoadCCars(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type EventLoadInterface interface {
		LoadEvent(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return cCarClassThenLoader[Q]{
		CCars: thenLoadBuilder[Q](
			"CCars",
			func(ctx context.Context, exec bob.Executor, retrieved CCarsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCars(ctx, exec, mods...)
			},
		),
		Event: thenLoadBuilder[Q](
			"Event",
			func(ctx context.Context, exec bob.Executor, retrieved EventLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEvent(ctx, exec, mods...)
			},
		),
	}
}

// LoadCCars loads the cCarClass's CCars into the .R struct
func (o *CCarClass) LoadCCars(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCars = nil

	related, err := o.CCars(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CCarClass = o
	}

	o.R.CCars = related
	return nil
}

// LoadCCars loads the cCarClass's CCars into the .R struct
func (os CCarClassSlice) LoadCCars(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCars, err := os.CCars(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CCars = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCars {

			if !(o.ID == rel.CCarClassID) {
				continue
			}

			rel.R.CCarClass = o

			o.R.CCars = append(o.R.CCars, rel)
		}
	}

	return nil
}

// LoadEvent loads the cCarClass's Event into the .R struct
func (o *CCarClass) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Event = nil

	related, err := o.Event(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CCarClasses = CCarClassSlice{o}

	o.R.Event = related
	return nil
}

// LoadEvent loads the cCarClass's Event into the .R struct
func (os CCarClassSlice) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Event(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range events {

			if !(o.EventID == rel.ID) {
				continue
			}

			rel.R.CCarClasses = append(rel.R.CCarClasses, o)

			o.R.Event = rel
			break
		}
	}

	return nil
}

type cCarClassJoins[Q dialect.Joinable] struct {
	typ   string
	CCars modAs[Q, cCarColumns]
	Event modAs[Q, eventColumns]
}

func (j cCarClassJoins[Q]) aliasedAs(alias string) cCarClassJoins[Q] {
	return buildCCarClassJoins[Q](buildCCarClassColumns(alias), j.typ)
}

func buildCCarClassJoins[Q dialect.Joinable](cols cCarClassColumns, typ string) cCarClassJoins[Q] {
	return cCarClassJoins[Q]{
		typ: typ,
		CCars: modAs[Q, cCarColumns]{
			c: CCars.Columns,
			f: func(to cCarColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCars.Name().As(to.Alias())).On(
						to.CCarClassID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Event: modAs[Q, eventColumns]{
			c: Events.Columns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.ID.EQ(cols.EventID),
					))
				}

				return mods
			},
		},
	}
}
