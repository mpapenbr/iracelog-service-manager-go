// Code generated by BobGen psql v0.39.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// MSGStateProto is an object representing the database table.
type MSGStateProto struct {
	ID        int32  `db:"id,pk" `
	RSInfoID  int32  `db:"rs_info_id" `
	Protodata []byte `db:"protodata" `

	R msgStateProtoR `db:"-" `
}

// MSGStateProtoSlice is an alias for a slice of pointers to MSGStateProto.
// This should almost always be used instead of []*MSGStateProto.
type MSGStateProtoSlice []*MSGStateProto

// MSGStateProtos contains methods to work with the msg_state_proto table
var MSGStateProtos = psql.NewTablex[*MSGStateProto, MSGStateProtoSlice, *MSGStateProtoSetter]("", "msg_state_proto")

// MSGStateProtosQuery is a query on the msg_state_proto table
type MSGStateProtosQuery = *psql.ViewQuery[*MSGStateProto, MSGStateProtoSlice]

// msgStateProtoR is where relationships are stored.
type msgStateProtoR struct {
	RSInfo *RSInfo // msg_state_proto.msg_state_proto_rs_info_id_fkey
}

type msgStateProtoColumnNames struct {
	ID        string
	RSInfoID  string
	Protodata string
}

var MSGStateProtoColumns = buildMSGStateProtoColumns("msg_state_proto")

type msgStateProtoColumns struct {
	tableAlias string
	ID         psql.Expression
	RSInfoID   psql.Expression
	Protodata  psql.Expression
}

func (c msgStateProtoColumns) Alias() string {
	return c.tableAlias
}

func (msgStateProtoColumns) AliasedAs(alias string) msgStateProtoColumns {
	return buildMSGStateProtoColumns(alias)
}

func buildMSGStateProtoColumns(alias string) msgStateProtoColumns {
	return msgStateProtoColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		RSInfoID:   psql.Quote(alias, "rs_info_id"),
		Protodata:  psql.Quote(alias, "protodata"),
	}
}

type msgStateProtoWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int32]
	RSInfoID  psql.WhereMod[Q, int32]
	Protodata psql.WhereMod[Q, []byte]
}

func (msgStateProtoWhere[Q]) AliasedAs(alias string) msgStateProtoWhere[Q] {
	return buildMSGStateProtoWhere[Q](buildMSGStateProtoColumns(alias))
}

func buildMSGStateProtoWhere[Q psql.Filterable](cols msgStateProtoColumns) msgStateProtoWhere[Q] {
	return msgStateProtoWhere[Q]{
		ID:        psql.Where[Q, int32](cols.ID),
		RSInfoID:  psql.Where[Q, int32](cols.RSInfoID),
		Protodata: psql.Where[Q, []byte](cols.Protodata),
	}
}

var MSGStateProtoErrors = &msgStateProtoErrors{
	ErrUniqueMsgStateProtoPkey: &UniqueConstraintError{
		schema:  "",
		table:   "msg_state_proto",
		columns: []string{"id"},
		s:       "msg_state_proto_pkey",
	},
}

type msgStateProtoErrors struct {
	ErrUniqueMsgStateProtoPkey *UniqueConstraintError
}

// MSGStateProtoSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type MSGStateProtoSetter struct {
	ID        omit.Val[int32]  `db:"id,pk" `
	RSInfoID  omit.Val[int32]  `db:"rs_info_id" `
	Protodata omit.Val[[]byte] `db:"protodata" `
}

func (s MSGStateProtoSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.RSInfoID.IsValue() {
		vals = append(vals, "rs_info_id")
	}
	if s.Protodata.IsValue() {
		vals = append(vals, "protodata")
	}
	return vals
}

func (s MSGStateProtoSetter) Overwrite(t *MSGStateProto) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.RSInfoID.IsValue() {
		t.RSInfoID = s.RSInfoID.MustGet()
	}
	if s.Protodata.IsValue() {
		t.Protodata = s.Protodata.MustGet()
	}
}

func (s *MSGStateProtoSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return MSGStateProtos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 3)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.RSInfoID.IsValue() {
			vals[1] = psql.Arg(s.RSInfoID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Protodata.IsValue() {
			vals[2] = psql.Arg(s.Protodata.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s MSGStateProtoSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s MSGStateProtoSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.RSInfoID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "rs_info_id")...),
			psql.Arg(s.RSInfoID),
		}})
	}

	if s.Protodata.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "protodata")...),
			psql.Arg(s.Protodata),
		}})
	}

	return exprs
}

// FindMSGStateProto retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindMSGStateProto(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*MSGStateProto, error) {
	if len(cols) == 0 {
		return MSGStateProtos.Query(
			SelectWhere.MSGStateProtos.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return MSGStateProtos.Query(
		SelectWhere.MSGStateProtos.ID.EQ(IDPK),
		sm.Columns(MSGStateProtos.Columns().Only(cols...)),
	).One(ctx, exec)
}

// MSGStateProtoExists checks the presence of a single record by primary key
func MSGStateProtoExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return MSGStateProtos.Query(
		SelectWhere.MSGStateProtos.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after MSGStateProto is retrieved from the database
func (o *MSGStateProto) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = MSGStateProtos.AfterSelectHooks.RunHooks(ctx, exec, MSGStateProtoSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = MSGStateProtos.AfterInsertHooks.RunHooks(ctx, exec, MSGStateProtoSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = MSGStateProtos.AfterUpdateHooks.RunHooks(ctx, exec, MSGStateProtoSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = MSGStateProtos.AfterDeleteHooks.RunHooks(ctx, exec, MSGStateProtoSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the MSGStateProto
func (o *MSGStateProto) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *MSGStateProto) pkEQ() dialect.Expression {
	return psql.Quote("msg_state_proto", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the MSGStateProto
func (o *MSGStateProto) Update(ctx context.Context, exec bob.Executor, s *MSGStateProtoSetter) error {
	v, err := MSGStateProtos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single MSGStateProto record with an executor
func (o *MSGStateProto) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := MSGStateProtos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the MSGStateProto using the executor
func (o *MSGStateProto) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := MSGStateProtos.Query(
		SelectWhere.MSGStateProtos.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after MSGStateProtoSlice is retrieved from the database
func (o MSGStateProtoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = MSGStateProtos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = MSGStateProtos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = MSGStateProtos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = MSGStateProtos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o MSGStateProtoSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("msg_state_proto", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o MSGStateProtoSlice) copyMatchingRows(from ...*MSGStateProto) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o MSGStateProtoSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return MSGStateProtos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *MSGStateProto:
				o.copyMatchingRows(retrieved)
			case []*MSGStateProto:
				o.copyMatchingRows(retrieved...)
			case MSGStateProtoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a MSGStateProto or a slice of MSGStateProto
				// then run the AfterUpdateHooks on the slice
				_, err = MSGStateProtos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o MSGStateProtoSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return MSGStateProtos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *MSGStateProto:
				o.copyMatchingRows(retrieved)
			case []*MSGStateProto:
				o.copyMatchingRows(retrieved...)
			case MSGStateProtoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a MSGStateProto or a slice of MSGStateProto
				// then run the AfterDeleteHooks on the slice
				_, err = MSGStateProtos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o MSGStateProtoSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals MSGStateProtoSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := MSGStateProtos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o MSGStateProtoSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := MSGStateProtos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o MSGStateProtoSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := MSGStateProtos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type msgStateProtoJoins[Q dialect.Joinable] struct {
	typ    string
	RSInfo modAs[Q, rsInfoColumns]
}

func (j msgStateProtoJoins[Q]) aliasedAs(alias string) msgStateProtoJoins[Q] {
	return buildMSGStateProtoJoins[Q](buildMSGStateProtoColumns(alias), j.typ)
}

func buildMSGStateProtoJoins[Q dialect.Joinable](cols msgStateProtoColumns, typ string) msgStateProtoJoins[Q] {
	return msgStateProtoJoins[Q]{
		typ: typ,
		RSInfo: modAs[Q, rsInfoColumns]{
			c: RSInfoColumns,
			f: func(to rsInfoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, RSInfos.Name().As(to.Alias())).On(
						to.ID.EQ(cols.RSInfoID),
					))
				}

				return mods
			},
		},
	}
}

// RSInfo starts a query for related objects on rs_info
func (o *MSGStateProto) RSInfo(mods ...bob.Mod[*dialect.SelectQuery]) RSInfosQuery {
	return RSInfos.Query(append(mods,
		sm.Where(RSInfoColumns.ID.EQ(psql.Arg(o.RSInfoID))),
	)...)
}

func (os MSGStateProtoSlice) RSInfo(mods ...bob.Mod[*dialect.SelectQuery]) RSInfosQuery {
	pkRSInfoID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkRSInfoID = append(pkRSInfoID, o.RSInfoID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkRSInfoID), "integer[]")),
	))

	return RSInfos.Query(append(mods,
		sm.Where(psql.Group(RSInfoColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *MSGStateProto) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "RSInfo":
		rel, ok := retrieved.(*RSInfo)
		if !ok {
			return fmt.Errorf("msgStateProto cannot load %T as %q", retrieved, name)
		}

		o.R.RSInfo = rel

		if rel != nil {
			rel.R.MSGStateProtos = MSGStateProtoSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("msgStateProto has no relationship %q", name)
	}
}

type msgStateProtoPreloader struct {
	RSInfo func(...psql.PreloadOption) psql.Preloader
}

func buildMSGStateProtoPreloader() msgStateProtoPreloader {
	return msgStateProtoPreloader{
		RSInfo: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*RSInfo, RSInfoSlice](orm.Relationship{
				Name: "RSInfo",
				Sides: []orm.RelSide{
					{
						From: TableNames.MSGStateProtos,
						To:   TableNames.RSInfos,
						FromColumns: []string{
							ColumnNames.MSGStateProtos.RSInfoID,
						},
						ToColumns: []string{
							ColumnNames.RSInfos.ID,
						},
					},
				},
			}, RSInfos.Columns().Names(), opts...)
		},
	}
}

type msgStateProtoThenLoader[Q orm.Loadable] struct {
	RSInfo func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildMSGStateProtoThenLoader[Q orm.Loadable]() msgStateProtoThenLoader[Q] {
	type RSInfoLoadInterface interface {
		LoadRSInfo(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return msgStateProtoThenLoader[Q]{
		RSInfo: thenLoadBuilder[Q](
			"RSInfo",
			func(ctx context.Context, exec bob.Executor, retrieved RSInfoLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadRSInfo(ctx, exec, mods...)
			},
		),
	}
}

// LoadRSInfo loads the msgStateProto's RSInfo into the .R struct
func (o *MSGStateProto) LoadRSInfo(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RSInfo = nil

	related, err := o.RSInfo(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.MSGStateProtos = MSGStateProtoSlice{o}

	o.R.RSInfo = related
	return nil
}

// LoadRSInfo loads the msgStateProto's RSInfo into the .R struct
func (os MSGStateProtoSlice) LoadRSInfo(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	rsInfos, err := os.RSInfo(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range rsInfos {

			if o.RSInfoID != rel.ID {
				continue
			}

			rel.R.MSGStateProtos = append(rel.R.MSGStateProtos, o)

			o.R.RSInfo = rel
			break
		}
	}

	return nil
}

func attachMSGStateProtoRSInfo0(ctx context.Context, exec bob.Executor, count int, msgStateProto0 *MSGStateProto, rsInfo1 *RSInfo) (*MSGStateProto, error) {
	setter := &MSGStateProtoSetter{
		RSInfoID: omit.From(rsInfo1.ID),
	}

	err := msgStateProto0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachMSGStateProtoRSInfo0: %w", err)
	}

	return msgStateProto0, nil
}

func (msgStateProto0 *MSGStateProto) InsertRSInfo(ctx context.Context, exec bob.Executor, related *RSInfoSetter) error {
	rsInfo1, err := RSInfos.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachMSGStateProtoRSInfo0(ctx, exec, 1, msgStateProto0, rsInfo1)
	if err != nil {
		return err
	}

	msgStateProto0.R.RSInfo = rsInfo1

	rsInfo1.R.MSGStateProtos = append(rsInfo1.R.MSGStateProtos, msgStateProto0)

	return nil
}

func (msgStateProto0 *MSGStateProto) AttachRSInfo(ctx context.Context, exec bob.Executor, rsInfo1 *RSInfo) error {
	var err error

	_, err = attachMSGStateProtoRSInfo0(ctx, exec, 1, msgStateProto0, rsInfo1)
	if err != nil {
		return err
	}

	msgStateProto0.R.RSInfo = rsInfo1

	rsInfo1.R.MSGStateProtos = append(rsInfo1.R.MSGStateProtos, msgStateProto0)

	return nil
}
