// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// CCarEntry is an object representing the database table.
type CCarEntry struct {
	ID           int32  `db:"id,pk" `
	EventID      int32  `db:"event_id" `
	CCarID       int32  `db:"c_car_id" `
	CarIdx       int32  `db:"car_idx" `
	CarNumber    string `db:"car_number" `
	CarNumberRaw int32  `db:"car_number_raw" `

	R cCarEntryR `db:"-" `
}

// CCarEntrySlice is an alias for a slice of pointers to CCarEntry.
// This should almost always be used instead of []*CCarEntry.
type CCarEntrySlice []*CCarEntry

// CCarEntries contains methods to work with the c_car_entry table
var CCarEntries = psql.NewTablex[*CCarEntry, CCarEntrySlice, *CCarEntrySetter]("", "c_car_entry", buildCCarEntryColumns("c_car_entry"))

// CCarEntriesQuery is a query on the c_car_entry table
type CCarEntriesQuery = *psql.ViewQuery[*CCarEntry, CCarEntrySlice]

// cCarEntryR is where relationships are stored.
type cCarEntryR struct {
	CCarDrivers CCarDriverSlice // c_car_driver.c_car_driver_car_entry_id_fkey
	CCar        *CCar           // c_car_entry.c_car_entry_car_id_fkey
	Event       *Event          // c_car_entry.c_car_entry_event_id_fkey
	CCarTeams   CCarTeamSlice   // c_car_team.c_car_team_car_entry_id_fkey
}

func buildCCarEntryColumns(alias string) cCarEntryColumns {
	return cCarEntryColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "event_id", "c_car_id", "car_idx", "car_number", "car_number_raw",
		).WithParent("c_car_entry"),
		tableAlias:   alias,
		ID:           psql.Quote(alias, "id"),
		EventID:      psql.Quote(alias, "event_id"),
		CCarID:       psql.Quote(alias, "c_car_id"),
		CarIdx:       psql.Quote(alias, "car_idx"),
		CarNumber:    psql.Quote(alias, "car_number"),
		CarNumberRaw: psql.Quote(alias, "car_number_raw"),
	}
}

type cCarEntryColumns struct {
	expr.ColumnsExpr
	tableAlias   string
	ID           psql.Expression
	EventID      psql.Expression
	CCarID       psql.Expression
	CarIdx       psql.Expression
	CarNumber    psql.Expression
	CarNumberRaw psql.Expression
}

func (c cCarEntryColumns) Alias() string {
	return c.tableAlias
}

func (cCarEntryColumns) AliasedAs(alias string) cCarEntryColumns {
	return buildCCarEntryColumns(alias)
}

// CCarEntrySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CCarEntrySetter struct {
	ID           omit.Val[int32]  `db:"id,pk" `
	EventID      omit.Val[int32]  `db:"event_id" `
	CCarID       omit.Val[int32]  `db:"c_car_id" `
	CarIdx       omit.Val[int32]  `db:"car_idx" `
	CarNumber    omit.Val[string] `db:"car_number" `
	CarNumberRaw omit.Val[int32]  `db:"car_number_raw" `
}

func (s CCarEntrySetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.EventID.IsValue() {
		vals = append(vals, "event_id")
	}
	if s.CCarID.IsValue() {
		vals = append(vals, "c_car_id")
	}
	if s.CarIdx.IsValue() {
		vals = append(vals, "car_idx")
	}
	if s.CarNumber.IsValue() {
		vals = append(vals, "car_number")
	}
	if s.CarNumberRaw.IsValue() {
		vals = append(vals, "car_number_raw")
	}
	return vals
}

func (s CCarEntrySetter) Overwrite(t *CCarEntry) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.EventID.IsValue() {
		t.EventID = s.EventID.MustGet()
	}
	if s.CCarID.IsValue() {
		t.CCarID = s.CCarID.MustGet()
	}
	if s.CarIdx.IsValue() {
		t.CarIdx = s.CarIdx.MustGet()
	}
	if s.CarNumber.IsValue() {
		t.CarNumber = s.CarNumber.MustGet()
	}
	if s.CarNumberRaw.IsValue() {
		t.CarNumberRaw = s.CarNumberRaw.MustGet()
	}
}

func (s *CCarEntrySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return CCarEntries.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.EventID.IsValue() {
			vals[1] = psql.Arg(s.EventID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.CCarID.IsValue() {
			vals[2] = psql.Arg(s.CCarID.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.CarIdx.IsValue() {
			vals[3] = psql.Arg(s.CarIdx.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CarNumber.IsValue() {
			vals[4] = psql.Arg(s.CarNumber.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.CarNumberRaw.IsValue() {
			vals[5] = psql.Arg(s.CarNumberRaw.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s CCarEntrySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s CCarEntrySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.EventID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_id")...),
			psql.Arg(s.EventID),
		}})
	}

	if s.CCarID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "c_car_id")...),
			psql.Arg(s.CCarID),
		}})
	}

	if s.CarIdx.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "car_idx")...),
			psql.Arg(s.CarIdx),
		}})
	}

	if s.CarNumber.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "car_number")...),
			psql.Arg(s.CarNumber),
		}})
	}

	if s.CarNumberRaw.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "car_number_raw")...),
			psql.Arg(s.CarNumberRaw),
		}})
	}

	return exprs
}

// FindCCarEntry retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCCarEntry(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*CCarEntry, error) {
	if len(cols) == 0 {
		return CCarEntries.Query(
			sm.Where(CCarEntries.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return CCarEntries.Query(
		sm.Where(CCarEntries.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(CCarEntries.Columns.Only(cols...)),
	).One(ctx, exec)
}

// CCarEntryExists checks the presence of a single record by primary key
func CCarEntryExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return CCarEntries.Query(
		sm.Where(CCarEntries.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after CCarEntry is retrieved from the database
func (o *CCarEntry) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCarEntries.AfterSelectHooks.RunHooks(ctx, exec, CCarEntrySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = CCarEntries.AfterInsertHooks.RunHooks(ctx, exec, CCarEntrySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = CCarEntries.AfterUpdateHooks.RunHooks(ctx, exec, CCarEntrySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = CCarEntries.AfterDeleteHooks.RunHooks(ctx, exec, CCarEntrySlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the CCarEntry
func (o *CCarEntry) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *CCarEntry) pkEQ() dialect.Expression {
	return psql.Quote("c_car_entry", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the CCarEntry
func (o *CCarEntry) Update(ctx context.Context, exec bob.Executor, s *CCarEntrySetter) error {
	v, err := CCarEntries.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single CCarEntry record with an executor
func (o *CCarEntry) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := CCarEntries.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the CCarEntry using the executor
func (o *CCarEntry) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := CCarEntries.Query(
		sm.Where(CCarEntries.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CCarEntrySlice is retrieved from the database
func (o CCarEntrySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCarEntries.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = CCarEntries.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = CCarEntries.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = CCarEntries.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CCarEntrySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("c_car_entry", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CCarEntrySlice) copyMatchingRows(from ...*CCarEntry) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CCarEntrySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCarEntries.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCarEntry:
				o.copyMatchingRows(retrieved)
			case []*CCarEntry:
				o.copyMatchingRows(retrieved...)
			case CCarEntrySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCarEntry or a slice of CCarEntry
				// then run the AfterUpdateHooks on the slice
				_, err = CCarEntries.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CCarEntrySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCarEntries.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCarEntry:
				o.copyMatchingRows(retrieved)
			case []*CCarEntry:
				o.copyMatchingRows(retrieved...)
			case CCarEntrySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCarEntry or a slice of CCarEntry
				// then run the AfterDeleteHooks on the slice
				_, err = CCarEntries.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CCarEntrySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CCarEntrySetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCarEntries.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o CCarEntrySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCarEntries.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CCarEntrySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := CCarEntries.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CCarDrivers starts a query for related objects on c_car_driver
func (o *CCarEntry) CCarDrivers(mods ...bob.Mod[*dialect.SelectQuery]) CCarDriversQuery {
	return CCarDrivers.Query(append(mods,
		sm.Where(CCarDrivers.Columns.CCarEntryID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os CCarEntrySlice) CCarDrivers(mods ...bob.Mod[*dialect.SelectQuery]) CCarDriversQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return CCarDrivers.Query(append(mods,
		sm.Where(psql.Group(CCarDrivers.Columns.CCarEntryID).OP("IN", PKArgExpr)),
	)...)
}

// CCar starts a query for related objects on c_car
func (o *CCarEntry) CCar(mods ...bob.Mod[*dialect.SelectQuery]) CCarsQuery {
	return CCars.Query(append(mods,
		sm.Where(CCars.Columns.ID.EQ(psql.Arg(o.CCarID))),
	)...)
}

func (os CCarEntrySlice) CCar(mods ...bob.Mod[*dialect.SelectQuery]) CCarsQuery {
	pkCCarID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkCCarID = append(pkCCarID, o.CCarID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkCCarID), "integer[]")),
	))

	return CCars.Query(append(mods,
		sm.Where(psql.Group(CCars.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

// Event starts a query for related objects on event
func (o *CCarEntry) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(Events.Columns.ID.EQ(psql.Arg(o.EventID))),
	)...)
}

func (os CCarEntrySlice) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	pkEventID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkEventID = append(pkEventID, o.EventID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkEventID), "integer[]")),
	))

	return Events.Query(append(mods,
		sm.Where(psql.Group(Events.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

// CCarTeams starts a query for related objects on c_car_team
func (o *CCarEntry) CCarTeams(mods ...bob.Mod[*dialect.SelectQuery]) CCarTeamsQuery {
	return CCarTeams.Query(append(mods,
		sm.Where(CCarTeams.Columns.CCarEntryID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os CCarEntrySlice) CCarTeams(mods ...bob.Mod[*dialect.SelectQuery]) CCarTeamsQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return CCarTeams.Query(append(mods,
		sm.Where(psql.Group(CCarTeams.Columns.CCarEntryID).OP("IN", PKArgExpr)),
	)...)
}

func insertCCarEntryCCarDrivers0(ctx context.Context, exec bob.Executor, cCarDrivers1 []*CCarDriverSetter, cCarEntry0 *CCarEntry) (CCarDriverSlice, error) {
	for i := range cCarDrivers1 {
		cCarDrivers1[i].CCarEntryID = omit.From(cCarEntry0.ID)
	}

	ret, err := CCarDrivers.Insert(bob.ToMods(cCarDrivers1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertCCarEntryCCarDrivers0: %w", err)
	}

	return ret, nil
}

func attachCCarEntryCCarDrivers0(ctx context.Context, exec bob.Executor, count int, cCarDrivers1 CCarDriverSlice, cCarEntry0 *CCarEntry) (CCarDriverSlice, error) {
	setter := &CCarDriverSetter{
		CCarEntryID: omit.From(cCarEntry0.ID),
	}

	err := cCarDrivers1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarEntryCCarDrivers0: %w", err)
	}

	return cCarDrivers1, nil
}

func (cCarEntry0 *CCarEntry) InsertCCarDrivers(ctx context.Context, exec bob.Executor, related ...*CCarDriverSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	cCarDrivers1, err := insertCCarEntryCCarDrivers0(ctx, exec, related, cCarEntry0)
	if err != nil {
		return err
	}

	cCarEntry0.R.CCarDrivers = append(cCarEntry0.R.CCarDrivers, cCarDrivers1...)

	for _, rel := range cCarDrivers1 {
		rel.R.CCarEntry = cCarEntry0
	}
	return nil
}

func (cCarEntry0 *CCarEntry) AttachCCarDrivers(ctx context.Context, exec bob.Executor, related ...*CCarDriver) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	cCarDrivers1 := CCarDriverSlice(related)

	_, err = attachCCarEntryCCarDrivers0(ctx, exec, len(related), cCarDrivers1, cCarEntry0)
	if err != nil {
		return err
	}

	cCarEntry0.R.CCarDrivers = append(cCarEntry0.R.CCarDrivers, cCarDrivers1...)

	for _, rel := range related {
		rel.R.CCarEntry = cCarEntry0
	}

	return nil
}

func attachCCarEntryCCar0(ctx context.Context, exec bob.Executor, count int, cCarEntry0 *CCarEntry, cCar1 *CCar) (*CCarEntry, error) {
	setter := &CCarEntrySetter{
		CCarID: omit.From(cCar1.ID),
	}

	err := cCarEntry0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarEntryCCar0: %w", err)
	}

	return cCarEntry0, nil
}

func (cCarEntry0 *CCarEntry) InsertCCar(ctx context.Context, exec bob.Executor, related *CCarSetter) error {
	cCar1, err := CCars.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCCarEntryCCar0(ctx, exec, 1, cCarEntry0, cCar1)
	if err != nil {
		return err
	}

	cCarEntry0.R.CCar = cCar1

	cCar1.R.CCarEntries = append(cCar1.R.CCarEntries, cCarEntry0)

	return nil
}

func (cCarEntry0 *CCarEntry) AttachCCar(ctx context.Context, exec bob.Executor, cCar1 *CCar) error {
	var err error

	_, err = attachCCarEntryCCar0(ctx, exec, 1, cCarEntry0, cCar1)
	if err != nil {
		return err
	}

	cCarEntry0.R.CCar = cCar1

	cCar1.R.CCarEntries = append(cCar1.R.CCarEntries, cCarEntry0)

	return nil
}

func attachCCarEntryEvent0(ctx context.Context, exec bob.Executor, count int, cCarEntry0 *CCarEntry, event1 *Event) (*CCarEntry, error) {
	setter := &CCarEntrySetter{
		EventID: omit.From(event1.ID),
	}

	err := cCarEntry0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarEntryEvent0: %w", err)
	}

	return cCarEntry0, nil
}

func (cCarEntry0 *CCarEntry) InsertEvent(ctx context.Context, exec bob.Executor, related *EventSetter) error {
	event1, err := Events.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCCarEntryEvent0(ctx, exec, 1, cCarEntry0, event1)
	if err != nil {
		return err
	}

	cCarEntry0.R.Event = event1

	event1.R.CCarEntries = append(event1.R.CCarEntries, cCarEntry0)

	return nil
}

func (cCarEntry0 *CCarEntry) AttachEvent(ctx context.Context, exec bob.Executor, event1 *Event) error {
	var err error

	_, err = attachCCarEntryEvent0(ctx, exec, 1, cCarEntry0, event1)
	if err != nil {
		return err
	}

	cCarEntry0.R.Event = event1

	event1.R.CCarEntries = append(event1.R.CCarEntries, cCarEntry0)

	return nil
}

func insertCCarEntryCCarTeams0(ctx context.Context, exec bob.Executor, cCarTeams1 []*CCarTeamSetter, cCarEntry0 *CCarEntry) (CCarTeamSlice, error) {
	for i := range cCarTeams1 {
		cCarTeams1[i].CCarEntryID = omit.From(cCarEntry0.ID)
	}

	ret, err := CCarTeams.Insert(bob.ToMods(cCarTeams1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertCCarEntryCCarTeams0: %w", err)
	}

	return ret, nil
}

func attachCCarEntryCCarTeams0(ctx context.Context, exec bob.Executor, count int, cCarTeams1 CCarTeamSlice, cCarEntry0 *CCarEntry) (CCarTeamSlice, error) {
	setter := &CCarTeamSetter{
		CCarEntryID: omit.From(cCarEntry0.ID),
	}

	err := cCarTeams1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarEntryCCarTeams0: %w", err)
	}

	return cCarTeams1, nil
}

func (cCarEntry0 *CCarEntry) InsertCCarTeams(ctx context.Context, exec bob.Executor, related ...*CCarTeamSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	cCarTeams1, err := insertCCarEntryCCarTeams0(ctx, exec, related, cCarEntry0)
	if err != nil {
		return err
	}

	cCarEntry0.R.CCarTeams = append(cCarEntry0.R.CCarTeams, cCarTeams1...)

	for _, rel := range cCarTeams1 {
		rel.R.CCarEntry = cCarEntry0
	}
	return nil
}

func (cCarEntry0 *CCarEntry) AttachCCarTeams(ctx context.Context, exec bob.Executor, related ...*CCarTeam) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	cCarTeams1 := CCarTeamSlice(related)

	_, err = attachCCarEntryCCarTeams0(ctx, exec, len(related), cCarTeams1, cCarEntry0)
	if err != nil {
		return err
	}

	cCarEntry0.R.CCarTeams = append(cCarEntry0.R.CCarTeams, cCarTeams1...)

	for _, rel := range related {
		rel.R.CCarEntry = cCarEntry0
	}

	return nil
}

type cCarEntryWhere[Q psql.Filterable] struct {
	ID           psql.WhereMod[Q, int32]
	EventID      psql.WhereMod[Q, int32]
	CCarID       psql.WhereMod[Q, int32]
	CarIdx       psql.WhereMod[Q, int32]
	CarNumber    psql.WhereMod[Q, string]
	CarNumberRaw psql.WhereMod[Q, int32]
}

func (cCarEntryWhere[Q]) AliasedAs(alias string) cCarEntryWhere[Q] {
	return buildCCarEntryWhere[Q](buildCCarEntryColumns(alias))
}

func buildCCarEntryWhere[Q psql.Filterable](cols cCarEntryColumns) cCarEntryWhere[Q] {
	return cCarEntryWhere[Q]{
		ID:           psql.Where[Q, int32](cols.ID),
		EventID:      psql.Where[Q, int32](cols.EventID),
		CCarID:       psql.Where[Q, int32](cols.CCarID),
		CarIdx:       psql.Where[Q, int32](cols.CarIdx),
		CarNumber:    psql.Where[Q, string](cols.CarNumber),
		CarNumberRaw: psql.Where[Q, int32](cols.CarNumberRaw),
	}
}

func (o *CCarEntry) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CCarDrivers":
		rels, ok := retrieved.(CCarDriverSlice)
		if !ok {
			return fmt.Errorf("cCarEntry cannot load %T as %q", retrieved, name)
		}

		o.R.CCarDrivers = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CCarEntry = o
			}
		}
		return nil
	case "CCar":
		rel, ok := retrieved.(*CCar)
		if !ok {
			return fmt.Errorf("cCarEntry cannot load %T as %q", retrieved, name)
		}

		o.R.CCar = rel

		if rel != nil {
			rel.R.CCarEntries = CCarEntrySlice{o}
		}
		return nil
	case "Event":
		rel, ok := retrieved.(*Event)
		if !ok {
			return fmt.Errorf("cCarEntry cannot load %T as %q", retrieved, name)
		}

		o.R.Event = rel

		if rel != nil {
			rel.R.CCarEntries = CCarEntrySlice{o}
		}
		return nil
	case "CCarTeams":
		rels, ok := retrieved.(CCarTeamSlice)
		if !ok {
			return fmt.Errorf("cCarEntry cannot load %T as %q", retrieved, name)
		}

		o.R.CCarTeams = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CCarEntry = o
			}
		}
		return nil
	default:
		return fmt.Errorf("cCarEntry has no relationship %q", name)
	}
}

type cCarEntryPreloader struct {
	CCar  func(...psql.PreloadOption) psql.Preloader
	Event func(...psql.PreloadOption) psql.Preloader
}

func buildCCarEntryPreloader() cCarEntryPreloader {
	return cCarEntryPreloader{
		CCar: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*CCar, CCarSlice](psql.PreloadRel{
				Name: "CCar",
				Sides: []psql.PreloadSide{
					{
						From:        CCarEntries,
						To:          CCars,
						FromColumns: []string{"c_car_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, CCars.Columns.Names(), opts...)
		},
		Event: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Event, EventSlice](psql.PreloadRel{
				Name: "Event",
				Sides: []psql.PreloadSide{
					{
						From:        CCarEntries,
						To:          Events,
						FromColumns: []string{"event_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Events.Columns.Names(), opts...)
		},
	}
}

type cCarEntryThenLoader[Q orm.Loadable] struct {
	CCarDrivers func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	CCar        func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Event       func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	CCarTeams   func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildCCarEntryThenLoader[Q orm.Loadable]() cCarEntryThenLoader[Q] {
	type CCarDriversLoadInterface interface {
		LoadCCarDrivers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type CCarLoadInterface interface {
		LoadCCar(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type EventLoadInterface interface {
		LoadEvent(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type CCarTeamsLoadInterface interface {
		LoadCCarTeams(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return cCarEntryThenLoader[Q]{
		CCarDrivers: thenLoadBuilder[Q](
			"CCarDrivers",
			func(ctx context.Context, exec bob.Executor, retrieved CCarDriversLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCarDrivers(ctx, exec, mods...)
			},
		),
		CCar: thenLoadBuilder[Q](
			"CCar",
			func(ctx context.Context, exec bob.Executor, retrieved CCarLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCar(ctx, exec, mods...)
			},
		),
		Event: thenLoadBuilder[Q](
			"Event",
			func(ctx context.Context, exec bob.Executor, retrieved EventLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEvent(ctx, exec, mods...)
			},
		),
		CCarTeams: thenLoadBuilder[Q](
			"CCarTeams",
			func(ctx context.Context, exec bob.Executor, retrieved CCarTeamsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCarTeams(ctx, exec, mods...)
			},
		),
	}
}

// LoadCCarDrivers loads the cCarEntry's CCarDrivers into the .R struct
func (o *CCarEntry) LoadCCarDrivers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCarDrivers = nil

	related, err := o.CCarDrivers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CCarEntry = o
	}

	o.R.CCarDrivers = related
	return nil
}

// LoadCCarDrivers loads the cCarEntry's CCarDrivers into the .R struct
func (os CCarEntrySlice) LoadCCarDrivers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCarDrivers, err := os.CCarDrivers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CCarDrivers = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCarDrivers {

			if !(o.ID == rel.CCarEntryID) {
				continue
			}

			rel.R.CCarEntry = o

			o.R.CCarDrivers = append(o.R.CCarDrivers, rel)
		}
	}

	return nil
}

// LoadCCar loads the cCarEntry's CCar into the .R struct
func (o *CCarEntry) LoadCCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCar = nil

	related, err := o.CCar(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CCarEntries = CCarEntrySlice{o}

	o.R.CCar = related
	return nil
}

// LoadCCar loads the cCarEntry's CCar into the .R struct
func (os CCarEntrySlice) LoadCCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCars, err := os.CCar(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCars {

			if !(o.CCarID == rel.ID) {
				continue
			}

			rel.R.CCarEntries = append(rel.R.CCarEntries, o)

			o.R.CCar = rel
			break
		}
	}

	return nil
}

// LoadEvent loads the cCarEntry's Event into the .R struct
func (o *CCarEntry) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Event = nil

	related, err := o.Event(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CCarEntries = CCarEntrySlice{o}

	o.R.Event = related
	return nil
}

// LoadEvent loads the cCarEntry's Event into the .R struct
func (os CCarEntrySlice) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Event(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range events {

			if !(o.EventID == rel.ID) {
				continue
			}

			rel.R.CCarEntries = append(rel.R.CCarEntries, o)

			o.R.Event = rel
			break
		}
	}

	return nil
}

// LoadCCarTeams loads the cCarEntry's CCarTeams into the .R struct
func (o *CCarEntry) LoadCCarTeams(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCarTeams = nil

	related, err := o.CCarTeams(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CCarEntry = o
	}

	o.R.CCarTeams = related
	return nil
}

// LoadCCarTeams loads the cCarEntry's CCarTeams into the .R struct
func (os CCarEntrySlice) LoadCCarTeams(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCarTeams, err := os.CCarTeams(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CCarTeams = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCarTeams {

			if !(o.ID == rel.CCarEntryID) {
				continue
			}

			rel.R.CCarEntry = o

			o.R.CCarTeams = append(o.R.CCarTeams, rel)
		}
	}

	return nil
}

type cCarEntryJoins[Q dialect.Joinable] struct {
	typ         string
	CCarDrivers modAs[Q, cCarDriverColumns]
	CCar        modAs[Q, cCarColumns]
	Event       modAs[Q, eventColumns]
	CCarTeams   modAs[Q, cCarTeamColumns]
}

func (j cCarEntryJoins[Q]) aliasedAs(alias string) cCarEntryJoins[Q] {
	return buildCCarEntryJoins[Q](buildCCarEntryColumns(alias), j.typ)
}

func buildCCarEntryJoins[Q dialect.Joinable](cols cCarEntryColumns, typ string) cCarEntryJoins[Q] {
	return cCarEntryJoins[Q]{
		typ: typ,
		CCarDrivers: modAs[Q, cCarDriverColumns]{
			c: CCarDrivers.Columns,
			f: func(to cCarDriverColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCarDrivers.Name().As(to.Alias())).On(
						to.CCarEntryID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		CCar: modAs[Q, cCarColumns]{
			c: CCars.Columns,
			f: func(to cCarColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCars.Name().As(to.Alias())).On(
						to.ID.EQ(cols.CCarID),
					))
				}

				return mods
			},
		},
		Event: modAs[Q, eventColumns]{
			c: Events.Columns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.ID.EQ(cols.EventID),
					))
				}

				return mods
			},
		},
		CCarTeams: modAs[Q, cCarTeamColumns]{
			c: CCarTeams.Columns,
			f: func(to cCarTeamColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCarTeams.Name().As(to.Alias())).On(
						to.CCarEntryID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
