// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// CCar is an object representing the database table.
type CCar struct {
	ID            int32           `db:"id,pk" `
	EventID       int32           `db:"event_id" `
	Name          string          `db:"name" `
	NameShort     string          `db:"name_short" `
	CarID         int32           `db:"car_id" `
	CCarClassID   int32           `db:"c_car_class_id" `
	FuelPCT       decimal.Decimal `db:"fuel_pct" `
	PowerAdjust   decimal.Decimal `db:"power_adjust" `
	WeightPenalty decimal.Decimal `db:"weight_penalty" `
	DryTireSets   int32           `db:"dry_tire_sets" `

	R cCarR `db:"-" `
}

// CCarSlice is an alias for a slice of pointers to CCar.
// This should almost always be used instead of []*CCar.
type CCarSlice []*CCar

// CCars contains methods to work with the c_car table
var CCars = psql.NewTablex[*CCar, CCarSlice, *CCarSetter]("", "c_car", buildCCarColumns("c_car"))

// CCarsQuery is a query on the c_car table
type CCarsQuery = *psql.ViewQuery[*CCar, CCarSlice]

// cCarR is where relationships are stored.
type cCarR struct {
	CCarClass   *CCarClass     // c_car.c_car_class_id_fkey
	Event       *Event         // c_car.c_car_event_id_fkey
	CCarEntries CCarEntrySlice // c_car_entry.c_car_entry_car_id_fkey
}

func buildCCarColumns(alias string) cCarColumns {
	return cCarColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "event_id", "name", "name_short", "car_id", "c_car_class_id", "fuel_pct", "power_adjust", "weight_penalty", "dry_tire_sets",
		).WithParent("c_car"),
		tableAlias:    alias,
		ID:            psql.Quote(alias, "id"),
		EventID:       psql.Quote(alias, "event_id"),
		Name:          psql.Quote(alias, "name"),
		NameShort:     psql.Quote(alias, "name_short"),
		CarID:         psql.Quote(alias, "car_id"),
		CCarClassID:   psql.Quote(alias, "c_car_class_id"),
		FuelPCT:       psql.Quote(alias, "fuel_pct"),
		PowerAdjust:   psql.Quote(alias, "power_adjust"),
		WeightPenalty: psql.Quote(alias, "weight_penalty"),
		DryTireSets:   psql.Quote(alias, "dry_tire_sets"),
	}
}

type cCarColumns struct {
	expr.ColumnsExpr
	tableAlias    string
	ID            psql.Expression
	EventID       psql.Expression
	Name          psql.Expression
	NameShort     psql.Expression
	CarID         psql.Expression
	CCarClassID   psql.Expression
	FuelPCT       psql.Expression
	PowerAdjust   psql.Expression
	WeightPenalty psql.Expression
	DryTireSets   psql.Expression
}

func (c cCarColumns) Alias() string {
	return c.tableAlias
}

func (cCarColumns) AliasedAs(alias string) cCarColumns {
	return buildCCarColumns(alias)
}

// CCarSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type CCarSetter struct {
	ID            omit.Val[int32]           `db:"id,pk" `
	EventID       omit.Val[int32]           `db:"event_id" `
	Name          omit.Val[string]          `db:"name" `
	NameShort     omit.Val[string]          `db:"name_short" `
	CarID         omit.Val[int32]           `db:"car_id" `
	CCarClassID   omit.Val[int32]           `db:"c_car_class_id" `
	FuelPCT       omit.Val[decimal.Decimal] `db:"fuel_pct" `
	PowerAdjust   omit.Val[decimal.Decimal] `db:"power_adjust" `
	WeightPenalty omit.Val[decimal.Decimal] `db:"weight_penalty" `
	DryTireSets   omit.Val[int32]           `db:"dry_tire_sets" `
}

func (s CCarSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.EventID.IsValue() {
		vals = append(vals, "event_id")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	if s.NameShort.IsValue() {
		vals = append(vals, "name_short")
	}
	if s.CarID.IsValue() {
		vals = append(vals, "car_id")
	}
	if s.CCarClassID.IsValue() {
		vals = append(vals, "c_car_class_id")
	}
	if s.FuelPCT.IsValue() {
		vals = append(vals, "fuel_pct")
	}
	if s.PowerAdjust.IsValue() {
		vals = append(vals, "power_adjust")
	}
	if s.WeightPenalty.IsValue() {
		vals = append(vals, "weight_penalty")
	}
	if s.DryTireSets.IsValue() {
		vals = append(vals, "dry_tire_sets")
	}
	return vals
}

func (s CCarSetter) Overwrite(t *CCar) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.EventID.IsValue() {
		t.EventID = s.EventID.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
	if s.NameShort.IsValue() {
		t.NameShort = s.NameShort.MustGet()
	}
	if s.CarID.IsValue() {
		t.CarID = s.CarID.MustGet()
	}
	if s.CCarClassID.IsValue() {
		t.CCarClassID = s.CCarClassID.MustGet()
	}
	if s.FuelPCT.IsValue() {
		t.FuelPCT = s.FuelPCT.MustGet()
	}
	if s.PowerAdjust.IsValue() {
		t.PowerAdjust = s.PowerAdjust.MustGet()
	}
	if s.WeightPenalty.IsValue() {
		t.WeightPenalty = s.WeightPenalty.MustGet()
	}
	if s.DryTireSets.IsValue() {
		t.DryTireSets = s.DryTireSets.MustGet()
	}
}

func (s *CCarSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return CCars.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.EventID.IsValue() {
			vals[1] = psql.Arg(s.EventID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Name.IsValue() {
			vals[2] = psql.Arg(s.Name.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.NameShort.IsValue() {
			vals[3] = psql.Arg(s.NameShort.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CarID.IsValue() {
			vals[4] = psql.Arg(s.CarID.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.CCarClassID.IsValue() {
			vals[5] = psql.Arg(s.CCarClassID.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.FuelPCT.IsValue() {
			vals[6] = psql.Arg(s.FuelPCT.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.PowerAdjust.IsValue() {
			vals[7] = psql.Arg(s.PowerAdjust.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.WeightPenalty.IsValue() {
			vals[8] = psql.Arg(s.WeightPenalty.MustGet())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.DryTireSets.IsValue() {
			vals[9] = psql.Arg(s.DryTireSets.MustGet())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s CCarSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s CCarSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.EventID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_id")...),
			psql.Arg(s.EventID),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.NameShort.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name_short")...),
			psql.Arg(s.NameShort),
		}})
	}

	if s.CarID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "car_id")...),
			psql.Arg(s.CarID),
		}})
	}

	if s.CCarClassID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "c_car_class_id")...),
			psql.Arg(s.CCarClassID),
		}})
	}

	if s.FuelPCT.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fuel_pct")...),
			psql.Arg(s.FuelPCT),
		}})
	}

	if s.PowerAdjust.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "power_adjust")...),
			psql.Arg(s.PowerAdjust),
		}})
	}

	if s.WeightPenalty.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "weight_penalty")...),
			psql.Arg(s.WeightPenalty),
		}})
	}

	if s.DryTireSets.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "dry_tire_sets")...),
			psql.Arg(s.DryTireSets),
		}})
	}

	return exprs
}

// FindCCar retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindCCar(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*CCar, error) {
	if len(cols) == 0 {
		return CCars.Query(
			sm.Where(CCars.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return CCars.Query(
		sm.Where(CCars.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(CCars.Columns.Only(cols...)),
	).One(ctx, exec)
}

// CCarExists checks the presence of a single record by primary key
func CCarExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return CCars.Query(
		sm.Where(CCars.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after CCar is retrieved from the database
func (o *CCar) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCars.AfterSelectHooks.RunHooks(ctx, exec, CCarSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = CCars.AfterInsertHooks.RunHooks(ctx, exec, CCarSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = CCars.AfterUpdateHooks.RunHooks(ctx, exec, CCarSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = CCars.AfterDeleteHooks.RunHooks(ctx, exec, CCarSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the CCar
func (o *CCar) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *CCar) pkEQ() dialect.Expression {
	return psql.Quote("c_car", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the CCar
func (o *CCar) Update(ctx context.Context, exec bob.Executor, s *CCarSetter) error {
	v, err := CCars.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single CCar record with an executor
func (o *CCar) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := CCars.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the CCar using the executor
func (o *CCar) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := CCars.Query(
		sm.Where(CCars.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after CCarSlice is retrieved from the database
func (o CCarSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = CCars.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = CCars.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = CCars.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = CCars.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o CCarSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("c_car", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o CCarSlice) copyMatchingRows(from ...*CCar) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o CCarSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCars.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCar:
				o.copyMatchingRows(retrieved)
			case []*CCar:
				o.copyMatchingRows(retrieved...)
			case CCarSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCar or a slice of CCar
				// then run the AfterUpdateHooks on the slice
				_, err = CCars.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o CCarSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return CCars.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *CCar:
				o.copyMatchingRows(retrieved)
			case []*CCar:
				o.copyMatchingRows(retrieved...)
			case CCarSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a CCar or a slice of CCar
				// then run the AfterDeleteHooks on the slice
				_, err = CCars.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o CCarSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals CCarSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCars.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o CCarSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := CCars.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o CCarSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := CCars.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CCarClass starts a query for related objects on c_car_class
func (o *CCar) CCarClass(mods ...bob.Mod[*dialect.SelectQuery]) CCarClassesQuery {
	return CCarClasses.Query(append(mods,
		sm.Where(CCarClasses.Columns.ID.EQ(psql.Arg(o.CCarClassID))),
	)...)
}

func (os CCarSlice) CCarClass(mods ...bob.Mod[*dialect.SelectQuery]) CCarClassesQuery {
	pkCCarClassID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkCCarClassID = append(pkCCarClassID, o.CCarClassID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkCCarClassID), "integer[]")),
	))

	return CCarClasses.Query(append(mods,
		sm.Where(psql.Group(CCarClasses.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

// Event starts a query for related objects on event
func (o *CCar) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(Events.Columns.ID.EQ(psql.Arg(o.EventID))),
	)...)
}

func (os CCarSlice) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	pkEventID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkEventID = append(pkEventID, o.EventID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkEventID), "integer[]")),
	))

	return Events.Query(append(mods,
		sm.Where(psql.Group(Events.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

// CCarEntries starts a query for related objects on c_car_entry
func (o *CCar) CCarEntries(mods ...bob.Mod[*dialect.SelectQuery]) CCarEntriesQuery {
	return CCarEntries.Query(append(mods,
		sm.Where(CCarEntries.Columns.CCarID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os CCarSlice) CCarEntries(mods ...bob.Mod[*dialect.SelectQuery]) CCarEntriesQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return CCarEntries.Query(append(mods,
		sm.Where(psql.Group(CCarEntries.Columns.CCarID).OP("IN", PKArgExpr)),
	)...)
}

func attachCCarCCarClass0(ctx context.Context, exec bob.Executor, count int, cCar0 *CCar, cCarClass1 *CCarClass) (*CCar, error) {
	setter := &CCarSetter{
		CCarClassID: omit.From(cCarClass1.ID),
	}

	err := cCar0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarCCarClass0: %w", err)
	}

	return cCar0, nil
}

func (cCar0 *CCar) InsertCCarClass(ctx context.Context, exec bob.Executor, related *CCarClassSetter) error {
	cCarClass1, err := CCarClasses.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCCarCCarClass0(ctx, exec, 1, cCar0, cCarClass1)
	if err != nil {
		return err
	}

	cCar0.R.CCarClass = cCarClass1

	cCarClass1.R.CCars = append(cCarClass1.R.CCars, cCar0)

	return nil
}

func (cCar0 *CCar) AttachCCarClass(ctx context.Context, exec bob.Executor, cCarClass1 *CCarClass) error {
	var err error

	_, err = attachCCarCCarClass0(ctx, exec, 1, cCar0, cCarClass1)
	if err != nil {
		return err
	}

	cCar0.R.CCarClass = cCarClass1

	cCarClass1.R.CCars = append(cCarClass1.R.CCars, cCar0)

	return nil
}

func attachCCarEvent0(ctx context.Context, exec bob.Executor, count int, cCar0 *CCar, event1 *Event) (*CCar, error) {
	setter := &CCarSetter{
		EventID: omit.From(event1.ID),
	}

	err := cCar0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarEvent0: %w", err)
	}

	return cCar0, nil
}

func (cCar0 *CCar) InsertEvent(ctx context.Context, exec bob.Executor, related *EventSetter) error {
	event1, err := Events.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachCCarEvent0(ctx, exec, 1, cCar0, event1)
	if err != nil {
		return err
	}

	cCar0.R.Event = event1

	event1.R.CCars = append(event1.R.CCars, cCar0)

	return nil
}

func (cCar0 *CCar) AttachEvent(ctx context.Context, exec bob.Executor, event1 *Event) error {
	var err error

	_, err = attachCCarEvent0(ctx, exec, 1, cCar0, event1)
	if err != nil {
		return err
	}

	cCar0.R.Event = event1

	event1.R.CCars = append(event1.R.CCars, cCar0)

	return nil
}

func insertCCarCCarEntries0(ctx context.Context, exec bob.Executor, cCarEntries1 []*CCarEntrySetter, cCar0 *CCar) (CCarEntrySlice, error) {
	for i := range cCarEntries1 {
		cCarEntries1[i].CCarID = omit.From(cCar0.ID)
	}

	ret, err := CCarEntries.Insert(bob.ToMods(cCarEntries1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertCCarCCarEntries0: %w", err)
	}

	return ret, nil
}

func attachCCarCCarEntries0(ctx context.Context, exec bob.Executor, count int, cCarEntries1 CCarEntrySlice, cCar0 *CCar) (CCarEntrySlice, error) {
	setter := &CCarEntrySetter{
		CCarID: omit.From(cCar0.ID),
	}

	err := cCarEntries1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachCCarCCarEntries0: %w", err)
	}

	return cCarEntries1, nil
}

func (cCar0 *CCar) InsertCCarEntries(ctx context.Context, exec bob.Executor, related ...*CCarEntrySetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	cCarEntries1, err := insertCCarCCarEntries0(ctx, exec, related, cCar0)
	if err != nil {
		return err
	}

	cCar0.R.CCarEntries = append(cCar0.R.CCarEntries, cCarEntries1...)

	for _, rel := range cCarEntries1 {
		rel.R.CCar = cCar0
	}
	return nil
}

func (cCar0 *CCar) AttachCCarEntries(ctx context.Context, exec bob.Executor, related ...*CCarEntry) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	cCarEntries1 := CCarEntrySlice(related)

	_, err = attachCCarCCarEntries0(ctx, exec, len(related), cCarEntries1, cCar0)
	if err != nil {
		return err
	}

	cCar0.R.CCarEntries = append(cCar0.R.CCarEntries, cCarEntries1...)

	for _, rel := range related {
		rel.R.CCar = cCar0
	}

	return nil
}

type cCarWhere[Q psql.Filterable] struct {
	ID            psql.WhereMod[Q, int32]
	EventID       psql.WhereMod[Q, int32]
	Name          psql.WhereMod[Q, string]
	NameShort     psql.WhereMod[Q, string]
	CarID         psql.WhereMod[Q, int32]
	CCarClassID   psql.WhereMod[Q, int32]
	FuelPCT       psql.WhereMod[Q, decimal.Decimal]
	PowerAdjust   psql.WhereMod[Q, decimal.Decimal]
	WeightPenalty psql.WhereMod[Q, decimal.Decimal]
	DryTireSets   psql.WhereMod[Q, int32]
}

func (cCarWhere[Q]) AliasedAs(alias string) cCarWhere[Q] {
	return buildCCarWhere[Q](buildCCarColumns(alias))
}

func buildCCarWhere[Q psql.Filterable](cols cCarColumns) cCarWhere[Q] {
	return cCarWhere[Q]{
		ID:            psql.Where[Q, int32](cols.ID),
		EventID:       psql.Where[Q, int32](cols.EventID),
		Name:          psql.Where[Q, string](cols.Name),
		NameShort:     psql.Where[Q, string](cols.NameShort),
		CarID:         psql.Where[Q, int32](cols.CarID),
		CCarClassID:   psql.Where[Q, int32](cols.CCarClassID),
		FuelPCT:       psql.Where[Q, decimal.Decimal](cols.FuelPCT),
		PowerAdjust:   psql.Where[Q, decimal.Decimal](cols.PowerAdjust),
		WeightPenalty: psql.Where[Q, decimal.Decimal](cols.WeightPenalty),
		DryTireSets:   psql.Where[Q, int32](cols.DryTireSets),
	}
}

func (o *CCar) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CCarClass":
		rel, ok := retrieved.(*CCarClass)
		if !ok {
			return fmt.Errorf("cCar cannot load %T as %q", retrieved, name)
		}

		o.R.CCarClass = rel

		if rel != nil {
			rel.R.CCars = CCarSlice{o}
		}
		return nil
	case "Event":
		rel, ok := retrieved.(*Event)
		if !ok {
			return fmt.Errorf("cCar cannot load %T as %q", retrieved, name)
		}

		o.R.Event = rel

		if rel != nil {
			rel.R.CCars = CCarSlice{o}
		}
		return nil
	case "CCarEntries":
		rels, ok := retrieved.(CCarEntrySlice)
		if !ok {
			return fmt.Errorf("cCar cannot load %T as %q", retrieved, name)
		}

		o.R.CCarEntries = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CCar = o
			}
		}
		return nil
	default:
		return fmt.Errorf("cCar has no relationship %q", name)
	}
}

type cCarPreloader struct {
	CCarClass func(...psql.PreloadOption) psql.Preloader
	Event     func(...psql.PreloadOption) psql.Preloader
}

func buildCCarPreloader() cCarPreloader {
	return cCarPreloader{
		CCarClass: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*CCarClass, CCarClassSlice](psql.PreloadRel{
				Name: "CCarClass",
				Sides: []psql.PreloadSide{
					{
						From:        CCars,
						To:          CCarClasses,
						FromColumns: []string{"c_car_class_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, CCarClasses.Columns.Names(), opts...)
		},
		Event: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Event, EventSlice](psql.PreloadRel{
				Name: "Event",
				Sides: []psql.PreloadSide{
					{
						From:        CCars,
						To:          Events,
						FromColumns: []string{"event_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Events.Columns.Names(), opts...)
		},
	}
}

type cCarThenLoader[Q orm.Loadable] struct {
	CCarClass   func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Event       func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	CCarEntries func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildCCarThenLoader[Q orm.Loadable]() cCarThenLoader[Q] {
	type CCarClassLoadInterface interface {
		LoadCCarClass(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type EventLoadInterface interface {
		LoadEvent(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type CCarEntriesLoadInterface interface {
		LoadCCarEntries(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return cCarThenLoader[Q]{
		CCarClass: thenLoadBuilder[Q](
			"CCarClass",
			func(ctx context.Context, exec bob.Executor, retrieved CCarClassLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCarClass(ctx, exec, mods...)
			},
		),
		Event: thenLoadBuilder[Q](
			"Event",
			func(ctx context.Context, exec bob.Executor, retrieved EventLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEvent(ctx, exec, mods...)
			},
		),
		CCarEntries: thenLoadBuilder[Q](
			"CCarEntries",
			func(ctx context.Context, exec bob.Executor, retrieved CCarEntriesLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCCarEntries(ctx, exec, mods...)
			},
		),
	}
}

// LoadCCarClass loads the cCar's CCarClass into the .R struct
func (o *CCar) LoadCCarClass(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCarClass = nil

	related, err := o.CCarClass(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CCars = CCarSlice{o}

	o.R.CCarClass = related
	return nil
}

// LoadCCarClass loads the cCar's CCarClass into the .R struct
func (os CCarSlice) LoadCCarClass(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCarClasses, err := os.CCarClass(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCarClasses {

			if !(o.CCarClassID == rel.ID) {
				continue
			}

			rel.R.CCars = append(rel.R.CCars, o)

			o.R.CCarClass = rel
			break
		}
	}

	return nil
}

// LoadEvent loads the cCar's Event into the .R struct
func (o *CCar) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Event = nil

	related, err := o.Event(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CCars = CCarSlice{o}

	o.R.Event = related
	return nil
}

// LoadEvent loads the cCar's Event into the .R struct
func (os CCarSlice) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Event(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range events {

			if !(o.EventID == rel.ID) {
				continue
			}

			rel.R.CCars = append(rel.R.CCars, o)

			o.R.Event = rel
			break
		}
	}

	return nil
}

// LoadCCarEntries loads the cCar's CCarEntries into the .R struct
func (o *CCar) LoadCCarEntries(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CCarEntries = nil

	related, err := o.CCarEntries(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CCar = o
	}

	o.R.CCarEntries = related
	return nil
}

// LoadCCarEntries loads the cCar's CCarEntries into the .R struct
func (os CCarSlice) LoadCCarEntries(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cCarEntries, err := os.CCarEntries(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CCarEntries = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range cCarEntries {

			if !(o.ID == rel.CCarID) {
				continue
			}

			rel.R.CCar = o

			o.R.CCarEntries = append(o.R.CCarEntries, rel)
		}
	}

	return nil
}

type cCarJoins[Q dialect.Joinable] struct {
	typ         string
	CCarClass   modAs[Q, cCarClassColumns]
	Event       modAs[Q, eventColumns]
	CCarEntries modAs[Q, cCarEntryColumns]
}

func (j cCarJoins[Q]) aliasedAs(alias string) cCarJoins[Q] {
	return buildCCarJoins[Q](buildCCarColumns(alias), j.typ)
}

func buildCCarJoins[Q dialect.Joinable](cols cCarColumns, typ string) cCarJoins[Q] {
	return cCarJoins[Q]{
		typ: typ,
		CCarClass: modAs[Q, cCarClassColumns]{
			c: CCarClasses.Columns,
			f: func(to cCarClassColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCarClasses.Name().As(to.Alias())).On(
						to.ID.EQ(cols.CCarClassID),
					))
				}

				return mods
			},
		},
		Event: modAs[Q, eventColumns]{
			c: Events.Columns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.ID.EQ(cols.EventID),
					))
				}

				return mods
			},
		},
		CCarEntries: modAs[Q, cCarEntryColumns]{
			c: CCarEntries.Columns,
			f: func(to cCarEntryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CCarEntries.Name().As(to.Alias())).On(
						to.CCarID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
