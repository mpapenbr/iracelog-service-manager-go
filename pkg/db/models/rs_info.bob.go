// Code generated by BobGen psql v0.39.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// RSInfo is an object representing the database table.
type RSInfo struct {
	ID            int32           `db:"id,pk" `
	EventID       int32           `db:"event_id" `
	RecordStamp   time.Time       `db:"record_stamp" `
	SessionTime   decimal.Decimal `db:"session_time" `
	TimeOfDay     int32           `db:"time_of_day" `
	AirTemp       decimal.Decimal `db:"air_temp" `
	TrackTemp     decimal.Decimal `db:"track_temp" `
	TrackWetness  int32           `db:"track_wetness" `
	Precipitation decimal.Decimal `db:"precipitation" `
	SessionNum    int32           `db:"session_num" `

	R rsInfoR `db:"-" `
}

// RSInfoSlice is an alias for a slice of pointers to RSInfo.
// This should almost always be used instead of []*RSInfo.
type RSInfoSlice []*RSInfo

// RSInfos contains methods to work with the rs_info table
var RSInfos = psql.NewTablex[*RSInfo, RSInfoSlice, *RSInfoSetter]("", "rs_info")

// RSInfosQuery is a query on the rs_info table
type RSInfosQuery = *psql.ViewQuery[*RSInfo, RSInfoSlice]

// rsInfoR is where relationships are stored.
type rsInfoR struct {
	CarStateProtos  CarStateProtoSlice  // car_state_proto.car_state_proto_rs_info_id_fkey
	MSGStateProtos  MSGStateProtoSlice  // msg_state_proto.msg_state_proto_rs_info_id_fkey
	RaceStateProtos RaceStateProtoSlice // race_state_proto.race_state_proto_rs_info_id_fkey
	Event           *Event              // rs_info.rs_info_event_id_fkey
	SpeedmapProtos  SpeedmapProtoSlice  // speedmap_proto.speedmap_proto_rs_info_id_fkey
}

type rsInfoColumnNames struct {
	ID            string
	EventID       string
	RecordStamp   string
	SessionTime   string
	TimeOfDay     string
	AirTemp       string
	TrackTemp     string
	TrackWetness  string
	Precipitation string
	SessionNum    string
}

var RSInfoColumns = buildRSInfoColumns("rs_info")

type rsInfoColumns struct {
	tableAlias    string
	ID            psql.Expression
	EventID       psql.Expression
	RecordStamp   psql.Expression
	SessionTime   psql.Expression
	TimeOfDay     psql.Expression
	AirTemp       psql.Expression
	TrackTemp     psql.Expression
	TrackWetness  psql.Expression
	Precipitation psql.Expression
	SessionNum    psql.Expression
}

func (c rsInfoColumns) Alias() string {
	return c.tableAlias
}

func (rsInfoColumns) AliasedAs(alias string) rsInfoColumns {
	return buildRSInfoColumns(alias)
}

func buildRSInfoColumns(alias string) rsInfoColumns {
	return rsInfoColumns{
		tableAlias:    alias,
		ID:            psql.Quote(alias, "id"),
		EventID:       psql.Quote(alias, "event_id"),
		RecordStamp:   psql.Quote(alias, "record_stamp"),
		SessionTime:   psql.Quote(alias, "session_time"),
		TimeOfDay:     psql.Quote(alias, "time_of_day"),
		AirTemp:       psql.Quote(alias, "air_temp"),
		TrackTemp:     psql.Quote(alias, "track_temp"),
		TrackWetness:  psql.Quote(alias, "track_wetness"),
		Precipitation: psql.Quote(alias, "precipitation"),
		SessionNum:    psql.Quote(alias, "session_num"),
	}
}

type rsInfoWhere[Q psql.Filterable] struct {
	ID            psql.WhereMod[Q, int32]
	EventID       psql.WhereMod[Q, int32]
	RecordStamp   psql.WhereMod[Q, time.Time]
	SessionTime   psql.WhereMod[Q, decimal.Decimal]
	TimeOfDay     psql.WhereMod[Q, int32]
	AirTemp       psql.WhereMod[Q, decimal.Decimal]
	TrackTemp     psql.WhereMod[Q, decimal.Decimal]
	TrackWetness  psql.WhereMod[Q, int32]
	Precipitation psql.WhereMod[Q, decimal.Decimal]
	SessionNum    psql.WhereMod[Q, int32]
}

func (rsInfoWhere[Q]) AliasedAs(alias string) rsInfoWhere[Q] {
	return buildRSInfoWhere[Q](buildRSInfoColumns(alias))
}

func buildRSInfoWhere[Q psql.Filterable](cols rsInfoColumns) rsInfoWhere[Q] {
	return rsInfoWhere[Q]{
		ID:            psql.Where[Q, int32](cols.ID),
		EventID:       psql.Where[Q, int32](cols.EventID),
		RecordStamp:   psql.Where[Q, time.Time](cols.RecordStamp),
		SessionTime:   psql.Where[Q, decimal.Decimal](cols.SessionTime),
		TimeOfDay:     psql.Where[Q, int32](cols.TimeOfDay),
		AirTemp:       psql.Where[Q, decimal.Decimal](cols.AirTemp),
		TrackTemp:     psql.Where[Q, decimal.Decimal](cols.TrackTemp),
		TrackWetness:  psql.Where[Q, int32](cols.TrackWetness),
		Precipitation: psql.Where[Q, decimal.Decimal](cols.Precipitation),
		SessionNum:    psql.Where[Q, int32](cols.SessionNum),
	}
}

var RSInfoErrors = &rsInfoErrors{
	ErrUniqueRsInfoPkey: &UniqueConstraintError{
		schema:  "",
		table:   "rs_info",
		columns: []string{"id"},
		s:       "rs_info_pkey",
	},
}

type rsInfoErrors struct {
	ErrUniqueRsInfoPkey *UniqueConstraintError
}

// RSInfoSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RSInfoSetter struct {
	ID            omit.Val[int32]           `db:"id,pk" `
	EventID       omit.Val[int32]           `db:"event_id" `
	RecordStamp   omit.Val[time.Time]       `db:"record_stamp" `
	SessionTime   omit.Val[decimal.Decimal] `db:"session_time" `
	TimeOfDay     omit.Val[int32]           `db:"time_of_day" `
	AirTemp       omit.Val[decimal.Decimal] `db:"air_temp" `
	TrackTemp     omit.Val[decimal.Decimal] `db:"track_temp" `
	TrackWetness  omit.Val[int32]           `db:"track_wetness" `
	Precipitation omit.Val[decimal.Decimal] `db:"precipitation" `
	SessionNum    omit.Val[int32]           `db:"session_num" `
}

func (s RSInfoSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.EventID.IsValue() {
		vals = append(vals, "event_id")
	}
	if s.RecordStamp.IsValue() {
		vals = append(vals, "record_stamp")
	}
	if s.SessionTime.IsValue() {
		vals = append(vals, "session_time")
	}
	if s.TimeOfDay.IsValue() {
		vals = append(vals, "time_of_day")
	}
	if s.AirTemp.IsValue() {
		vals = append(vals, "air_temp")
	}
	if s.TrackTemp.IsValue() {
		vals = append(vals, "track_temp")
	}
	if s.TrackWetness.IsValue() {
		vals = append(vals, "track_wetness")
	}
	if s.Precipitation.IsValue() {
		vals = append(vals, "precipitation")
	}
	if s.SessionNum.IsValue() {
		vals = append(vals, "session_num")
	}
	return vals
}

func (s RSInfoSetter) Overwrite(t *RSInfo) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.EventID.IsValue() {
		t.EventID = s.EventID.MustGet()
	}
	if s.RecordStamp.IsValue() {
		t.RecordStamp = s.RecordStamp.MustGet()
	}
	if s.SessionTime.IsValue() {
		t.SessionTime = s.SessionTime.MustGet()
	}
	if s.TimeOfDay.IsValue() {
		t.TimeOfDay = s.TimeOfDay.MustGet()
	}
	if s.AirTemp.IsValue() {
		t.AirTemp = s.AirTemp.MustGet()
	}
	if s.TrackTemp.IsValue() {
		t.TrackTemp = s.TrackTemp.MustGet()
	}
	if s.TrackWetness.IsValue() {
		t.TrackWetness = s.TrackWetness.MustGet()
	}
	if s.Precipitation.IsValue() {
		t.Precipitation = s.Precipitation.MustGet()
	}
	if s.SessionNum.IsValue() {
		t.SessionNum = s.SessionNum.MustGet()
	}
}

func (s *RSInfoSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return RSInfos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.EventID.IsValue() {
			vals[1] = psql.Arg(s.EventID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.RecordStamp.IsValue() {
			vals[2] = psql.Arg(s.RecordStamp.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.SessionTime.IsValue() {
			vals[3] = psql.Arg(s.SessionTime.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.TimeOfDay.IsValue() {
			vals[4] = psql.Arg(s.TimeOfDay.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.AirTemp.IsValue() {
			vals[5] = psql.Arg(s.AirTemp.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.TrackTemp.IsValue() {
			vals[6] = psql.Arg(s.TrackTemp.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.TrackWetness.IsValue() {
			vals[7] = psql.Arg(s.TrackWetness.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.Precipitation.IsValue() {
			vals[8] = psql.Arg(s.Precipitation.MustGet())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.SessionNum.IsValue() {
			vals[9] = psql.Arg(s.SessionNum.MustGet())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s RSInfoSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s RSInfoSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.EventID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_id")...),
			psql.Arg(s.EventID),
		}})
	}

	if s.RecordStamp.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "record_stamp")...),
			psql.Arg(s.RecordStamp),
		}})
	}

	if s.SessionTime.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "session_time")...),
			psql.Arg(s.SessionTime),
		}})
	}

	if s.TimeOfDay.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "time_of_day")...),
			psql.Arg(s.TimeOfDay),
		}})
	}

	if s.AirTemp.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "air_temp")...),
			psql.Arg(s.AirTemp),
		}})
	}

	if s.TrackTemp.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "track_temp")...),
			psql.Arg(s.TrackTemp),
		}})
	}

	if s.TrackWetness.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "track_wetness")...),
			psql.Arg(s.TrackWetness),
		}})
	}

	if s.Precipitation.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "precipitation")...),
			psql.Arg(s.Precipitation),
		}})
	}

	if s.SessionNum.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "session_num")...),
			psql.Arg(s.SessionNum),
		}})
	}

	return exprs
}

// FindRSInfo retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRSInfo(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*RSInfo, error) {
	if len(cols) == 0 {
		return RSInfos.Query(
			SelectWhere.RSInfos.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return RSInfos.Query(
		SelectWhere.RSInfos.ID.EQ(IDPK),
		sm.Columns(RSInfos.Columns().Only(cols...)),
	).One(ctx, exec)
}

// RSInfoExists checks the presence of a single record by primary key
func RSInfoExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return RSInfos.Query(
		SelectWhere.RSInfos.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after RSInfo is retrieved from the database
func (o *RSInfo) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RSInfos.AfterSelectHooks.RunHooks(ctx, exec, RSInfoSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = RSInfos.AfterInsertHooks.RunHooks(ctx, exec, RSInfoSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = RSInfos.AfterUpdateHooks.RunHooks(ctx, exec, RSInfoSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = RSInfos.AfterDeleteHooks.RunHooks(ctx, exec, RSInfoSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the RSInfo
func (o *RSInfo) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *RSInfo) pkEQ() dialect.Expression {
	return psql.Quote("rs_info", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the RSInfo
func (o *RSInfo) Update(ctx context.Context, exec bob.Executor, s *RSInfoSetter) error {
	v, err := RSInfos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single RSInfo record with an executor
func (o *RSInfo) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := RSInfos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the RSInfo using the executor
func (o *RSInfo) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := RSInfos.Query(
		SelectWhere.RSInfos.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after RSInfoSlice is retrieved from the database
func (o RSInfoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RSInfos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = RSInfos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = RSInfos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = RSInfos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o RSInfoSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("rs_info", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o RSInfoSlice) copyMatchingRows(from ...*RSInfo) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o RSInfoSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RSInfos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RSInfo:
				o.copyMatchingRows(retrieved)
			case []*RSInfo:
				o.copyMatchingRows(retrieved...)
			case RSInfoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RSInfo or a slice of RSInfo
				// then run the AfterUpdateHooks on the slice
				_, err = RSInfos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o RSInfoSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RSInfos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RSInfo:
				o.copyMatchingRows(retrieved)
			case []*RSInfo:
				o.copyMatchingRows(retrieved...)
			case RSInfoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RSInfo or a slice of RSInfo
				// then run the AfterDeleteHooks on the slice
				_, err = RSInfos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o RSInfoSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RSInfoSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RSInfos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o RSInfoSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RSInfos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o RSInfoSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := RSInfos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type rsInfoJoins[Q dialect.Joinable] struct {
	typ             string
	CarStateProtos  modAs[Q, carStateProtoColumns]
	MSGStateProtos  modAs[Q, msgStateProtoColumns]
	RaceStateProtos modAs[Q, raceStateProtoColumns]
	Event           modAs[Q, eventColumns]
	SpeedmapProtos  modAs[Q, speedmapProtoColumns]
}

func (j rsInfoJoins[Q]) aliasedAs(alias string) rsInfoJoins[Q] {
	return buildRSInfoJoins[Q](buildRSInfoColumns(alias), j.typ)
}

func buildRSInfoJoins[Q dialect.Joinable](cols rsInfoColumns, typ string) rsInfoJoins[Q] {
	return rsInfoJoins[Q]{
		typ: typ,
		CarStateProtos: modAs[Q, carStateProtoColumns]{
			c: CarStateProtoColumns,
			f: func(to carStateProtoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, CarStateProtos.Name().As(to.Alias())).On(
						to.RSInfoID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		MSGStateProtos: modAs[Q, msgStateProtoColumns]{
			c: MSGStateProtoColumns,
			f: func(to msgStateProtoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, MSGStateProtos.Name().As(to.Alias())).On(
						to.RSInfoID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		RaceStateProtos: modAs[Q, raceStateProtoColumns]{
			c: RaceStateProtoColumns,
			f: func(to raceStateProtoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, RaceStateProtos.Name().As(to.Alias())).On(
						to.RSInfoID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Event: modAs[Q, eventColumns]{
			c: EventColumns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.ID.EQ(cols.EventID),
					))
				}

				return mods
			},
		},
		SpeedmapProtos: modAs[Q, speedmapProtoColumns]{
			c: SpeedmapProtoColumns,
			f: func(to speedmapProtoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, SpeedmapProtos.Name().As(to.Alias())).On(
						to.RSInfoID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}

// CarStateProtos starts a query for related objects on car_state_proto
func (o *RSInfo) CarStateProtos(mods ...bob.Mod[*dialect.SelectQuery]) CarStateProtosQuery {
	return CarStateProtos.Query(append(mods,
		sm.Where(CarStateProtoColumns.RSInfoID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RSInfoSlice) CarStateProtos(mods ...bob.Mod[*dialect.SelectQuery]) CarStateProtosQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return CarStateProtos.Query(append(mods,
		sm.Where(psql.Group(CarStateProtoColumns.RSInfoID).OP("IN", PKArgExpr)),
	)...)
}

// MSGStateProtos starts a query for related objects on msg_state_proto
func (o *RSInfo) MSGStateProtos(mods ...bob.Mod[*dialect.SelectQuery]) MSGStateProtosQuery {
	return MSGStateProtos.Query(append(mods,
		sm.Where(MSGStateProtoColumns.RSInfoID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RSInfoSlice) MSGStateProtos(mods ...bob.Mod[*dialect.SelectQuery]) MSGStateProtosQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return MSGStateProtos.Query(append(mods,
		sm.Where(psql.Group(MSGStateProtoColumns.RSInfoID).OP("IN", PKArgExpr)),
	)...)
}

// RaceStateProtos starts a query for related objects on race_state_proto
func (o *RSInfo) RaceStateProtos(mods ...bob.Mod[*dialect.SelectQuery]) RaceStateProtosQuery {
	return RaceStateProtos.Query(append(mods,
		sm.Where(RaceStateProtoColumns.RSInfoID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RSInfoSlice) RaceStateProtos(mods ...bob.Mod[*dialect.SelectQuery]) RaceStateProtosQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return RaceStateProtos.Query(append(mods,
		sm.Where(psql.Group(RaceStateProtoColumns.RSInfoID).OP("IN", PKArgExpr)),
	)...)
}

// Event starts a query for related objects on event
func (o *RSInfo) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(EventColumns.ID.EQ(psql.Arg(o.EventID))),
	)...)
}

func (os RSInfoSlice) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	pkEventID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkEventID = append(pkEventID, o.EventID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkEventID), "integer[]")),
	))

	return Events.Query(append(mods,
		sm.Where(psql.Group(EventColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

// SpeedmapProtos starts a query for related objects on speedmap_proto
func (o *RSInfo) SpeedmapProtos(mods ...bob.Mod[*dialect.SelectQuery]) SpeedmapProtosQuery {
	return SpeedmapProtos.Query(append(mods,
		sm.Where(SpeedmapProtoColumns.RSInfoID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os RSInfoSlice) SpeedmapProtos(mods ...bob.Mod[*dialect.SelectQuery]) SpeedmapProtosQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return SpeedmapProtos.Query(append(mods,
		sm.Where(psql.Group(SpeedmapProtoColumns.RSInfoID).OP("IN", PKArgExpr)),
	)...)
}

func (o *RSInfo) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CarStateProtos":
		rels, ok := retrieved.(CarStateProtoSlice)
		if !ok {
			return fmt.Errorf("rsInfo cannot load %T as %q", retrieved, name)
		}

		o.R.CarStateProtos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.RSInfo = o
			}
		}
		return nil
	case "MSGStateProtos":
		rels, ok := retrieved.(MSGStateProtoSlice)
		if !ok {
			return fmt.Errorf("rsInfo cannot load %T as %q", retrieved, name)
		}

		o.R.MSGStateProtos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.RSInfo = o
			}
		}
		return nil
	case "RaceStateProtos":
		rels, ok := retrieved.(RaceStateProtoSlice)
		if !ok {
			return fmt.Errorf("rsInfo cannot load %T as %q", retrieved, name)
		}

		o.R.RaceStateProtos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.RSInfo = o
			}
		}
		return nil
	case "Event":
		rel, ok := retrieved.(*Event)
		if !ok {
			return fmt.Errorf("rsInfo cannot load %T as %q", retrieved, name)
		}

		o.R.Event = rel

		if rel != nil {
			rel.R.RSInfos = RSInfoSlice{o}
		}
		return nil
	case "SpeedmapProtos":
		rels, ok := retrieved.(SpeedmapProtoSlice)
		if !ok {
			return fmt.Errorf("rsInfo cannot load %T as %q", retrieved, name)
		}

		o.R.SpeedmapProtos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.RSInfo = o
			}
		}
		return nil
	default:
		return fmt.Errorf("rsInfo has no relationship %q", name)
	}
}

type rsInfoPreloader struct {
	Event func(...psql.PreloadOption) psql.Preloader
}

func buildRSInfoPreloader() rsInfoPreloader {
	return rsInfoPreloader{
		Event: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Event, EventSlice](orm.Relationship{
				Name: "Event",
				Sides: []orm.RelSide{
					{
						From: TableNames.RSInfos,
						To:   TableNames.Events,
						FromColumns: []string{
							ColumnNames.RSInfos.EventID,
						},
						ToColumns: []string{
							ColumnNames.Events.ID,
						},
					},
				},
			}, Events.Columns().Names(), opts...)
		},
	}
}

type rsInfoThenLoader[Q orm.Loadable] struct {
	CarStateProtos  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	MSGStateProtos  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	RaceStateProtos func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Event           func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	SpeedmapProtos  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildRSInfoThenLoader[Q orm.Loadable]() rsInfoThenLoader[Q] {
	type CarStateProtosLoadInterface interface {
		LoadCarStateProtos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type MSGStateProtosLoadInterface interface {
		LoadMSGStateProtos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type RaceStateProtosLoadInterface interface {
		LoadRaceStateProtos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type EventLoadInterface interface {
		LoadEvent(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SpeedmapProtosLoadInterface interface {
		LoadSpeedmapProtos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return rsInfoThenLoader[Q]{
		CarStateProtos: thenLoadBuilder[Q](
			"CarStateProtos",
			func(ctx context.Context, exec bob.Executor, retrieved CarStateProtosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCarStateProtos(ctx, exec, mods...)
			},
		),
		MSGStateProtos: thenLoadBuilder[Q](
			"MSGStateProtos",
			func(ctx context.Context, exec bob.Executor, retrieved MSGStateProtosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadMSGStateProtos(ctx, exec, mods...)
			},
		),
		RaceStateProtos: thenLoadBuilder[Q](
			"RaceStateProtos",
			func(ctx context.Context, exec bob.Executor, retrieved RaceStateProtosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadRaceStateProtos(ctx, exec, mods...)
			},
		),
		Event: thenLoadBuilder[Q](
			"Event",
			func(ctx context.Context, exec bob.Executor, retrieved EventLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEvent(ctx, exec, mods...)
			},
		),
		SpeedmapProtos: thenLoadBuilder[Q](
			"SpeedmapProtos",
			func(ctx context.Context, exec bob.Executor, retrieved SpeedmapProtosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSpeedmapProtos(ctx, exec, mods...)
			},
		),
	}
}

// LoadCarStateProtos loads the rsInfo's CarStateProtos into the .R struct
func (o *RSInfo) LoadCarStateProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CarStateProtos = nil

	related, err := o.CarStateProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.RSInfo = o
	}

	o.R.CarStateProtos = related
	return nil
}

// LoadCarStateProtos loads the rsInfo's CarStateProtos into the .R struct
func (os RSInfoSlice) LoadCarStateProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	carStateProtos, err := os.CarStateProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CarStateProtos = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range carStateProtos {

			if o.ID != rel.RSInfoID {
				continue
			}

			rel.R.RSInfo = o

			o.R.CarStateProtos = append(o.R.CarStateProtos, rel)
		}
	}

	return nil
}

// LoadMSGStateProtos loads the rsInfo's MSGStateProtos into the .R struct
func (o *RSInfo) LoadMSGStateProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.MSGStateProtos = nil

	related, err := o.MSGStateProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.RSInfo = o
	}

	o.R.MSGStateProtos = related
	return nil
}

// LoadMSGStateProtos loads the rsInfo's MSGStateProtos into the .R struct
func (os RSInfoSlice) LoadMSGStateProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	msgStateProtos, err := os.MSGStateProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.MSGStateProtos = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range msgStateProtos {

			if o.ID != rel.RSInfoID {
				continue
			}

			rel.R.RSInfo = o

			o.R.MSGStateProtos = append(o.R.MSGStateProtos, rel)
		}
	}

	return nil
}

// LoadRaceStateProtos loads the rsInfo's RaceStateProtos into the .R struct
func (o *RSInfo) LoadRaceStateProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RaceStateProtos = nil

	related, err := o.RaceStateProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.RSInfo = o
	}

	o.R.RaceStateProtos = related
	return nil
}

// LoadRaceStateProtos loads the rsInfo's RaceStateProtos into the .R struct
func (os RSInfoSlice) LoadRaceStateProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	raceStateProtos, err := os.RaceStateProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.RaceStateProtos = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range raceStateProtos {

			if o.ID != rel.RSInfoID {
				continue
			}

			rel.R.RSInfo = o

			o.R.RaceStateProtos = append(o.R.RaceStateProtos, rel)
		}
	}

	return nil
}

// LoadEvent loads the rsInfo's Event into the .R struct
func (o *RSInfo) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Event = nil

	related, err := o.Event(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.RSInfos = RSInfoSlice{o}

	o.R.Event = related
	return nil
}

// LoadEvent loads the rsInfo's Event into the .R struct
func (os RSInfoSlice) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Event(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range events {

			if o.EventID != rel.ID {
				continue
			}

			rel.R.RSInfos = append(rel.R.RSInfos, o)

			o.R.Event = rel
			break
		}
	}

	return nil
}

// LoadSpeedmapProtos loads the rsInfo's SpeedmapProtos into the .R struct
func (o *RSInfo) LoadSpeedmapProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.SpeedmapProtos = nil

	related, err := o.SpeedmapProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.RSInfo = o
	}

	o.R.SpeedmapProtos = related
	return nil
}

// LoadSpeedmapProtos loads the rsInfo's SpeedmapProtos into the .R struct
func (os RSInfoSlice) LoadSpeedmapProtos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	speedmapProtos, err := os.SpeedmapProtos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.SpeedmapProtos = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range speedmapProtos {

			if o.ID != rel.RSInfoID {
				continue
			}

			rel.R.RSInfo = o

			o.R.SpeedmapProtos = append(o.R.SpeedmapProtos, rel)
		}
	}

	return nil
}

func insertRSInfoCarStateProtos0(ctx context.Context, exec bob.Executor, carStateProtos1 []*CarStateProtoSetter, rsInfo0 *RSInfo) (CarStateProtoSlice, error) {
	for i := range carStateProtos1 {
		carStateProtos1[i].RSInfoID = omit.From(rsInfo0.ID)
	}

	ret, err := CarStateProtos.Insert(bob.ToMods(carStateProtos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertRSInfoCarStateProtos0: %w", err)
	}

	return ret, nil
}

func attachRSInfoCarStateProtos0(ctx context.Context, exec bob.Executor, count int, carStateProtos1 CarStateProtoSlice, rsInfo0 *RSInfo) (CarStateProtoSlice, error) {
	setter := &CarStateProtoSetter{
		RSInfoID: omit.From(rsInfo0.ID),
	}

	err := carStateProtos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachRSInfoCarStateProtos0: %w", err)
	}

	return carStateProtos1, nil
}

func (rsInfo0 *RSInfo) InsertCarStateProtos(ctx context.Context, exec bob.Executor, related ...*CarStateProtoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	carStateProtos1, err := insertRSInfoCarStateProtos0(ctx, exec, related, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.CarStateProtos = append(rsInfo0.R.CarStateProtos, carStateProtos1...)

	for _, rel := range carStateProtos1 {
		rel.R.RSInfo = rsInfo0
	}
	return nil
}

func (rsInfo0 *RSInfo) AttachCarStateProtos(ctx context.Context, exec bob.Executor, related ...*CarStateProto) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	carStateProtos1 := CarStateProtoSlice(related)

	_, err = attachRSInfoCarStateProtos0(ctx, exec, len(related), carStateProtos1, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.CarStateProtos = append(rsInfo0.R.CarStateProtos, carStateProtos1...)

	for _, rel := range related {
		rel.R.RSInfo = rsInfo0
	}

	return nil
}

func insertRSInfoMSGStateProtos0(ctx context.Context, exec bob.Executor, msgStateProtos1 []*MSGStateProtoSetter, rsInfo0 *RSInfo) (MSGStateProtoSlice, error) {
	for i := range msgStateProtos1 {
		msgStateProtos1[i].RSInfoID = omit.From(rsInfo0.ID)
	}

	ret, err := MSGStateProtos.Insert(bob.ToMods(msgStateProtos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertRSInfoMSGStateProtos0: %w", err)
	}

	return ret, nil
}

func attachRSInfoMSGStateProtos0(ctx context.Context, exec bob.Executor, count int, msgStateProtos1 MSGStateProtoSlice, rsInfo0 *RSInfo) (MSGStateProtoSlice, error) {
	setter := &MSGStateProtoSetter{
		RSInfoID: omit.From(rsInfo0.ID),
	}

	err := msgStateProtos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachRSInfoMSGStateProtos0: %w", err)
	}

	return msgStateProtos1, nil
}

func (rsInfo0 *RSInfo) InsertMSGStateProtos(ctx context.Context, exec bob.Executor, related ...*MSGStateProtoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	msgStateProtos1, err := insertRSInfoMSGStateProtos0(ctx, exec, related, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.MSGStateProtos = append(rsInfo0.R.MSGStateProtos, msgStateProtos1...)

	for _, rel := range msgStateProtos1 {
		rel.R.RSInfo = rsInfo0
	}
	return nil
}

func (rsInfo0 *RSInfo) AttachMSGStateProtos(ctx context.Context, exec bob.Executor, related ...*MSGStateProto) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	msgStateProtos1 := MSGStateProtoSlice(related)

	_, err = attachRSInfoMSGStateProtos0(ctx, exec, len(related), msgStateProtos1, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.MSGStateProtos = append(rsInfo0.R.MSGStateProtos, msgStateProtos1...)

	for _, rel := range related {
		rel.R.RSInfo = rsInfo0
	}

	return nil
}

func insertRSInfoRaceStateProtos0(ctx context.Context, exec bob.Executor, raceStateProtos1 []*RaceStateProtoSetter, rsInfo0 *RSInfo) (RaceStateProtoSlice, error) {
	for i := range raceStateProtos1 {
		raceStateProtos1[i].RSInfoID = omit.From(rsInfo0.ID)
	}

	ret, err := RaceStateProtos.Insert(bob.ToMods(raceStateProtos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertRSInfoRaceStateProtos0: %w", err)
	}

	return ret, nil
}

func attachRSInfoRaceStateProtos0(ctx context.Context, exec bob.Executor, count int, raceStateProtos1 RaceStateProtoSlice, rsInfo0 *RSInfo) (RaceStateProtoSlice, error) {
	setter := &RaceStateProtoSetter{
		RSInfoID: omit.From(rsInfo0.ID),
	}

	err := raceStateProtos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachRSInfoRaceStateProtos0: %w", err)
	}

	return raceStateProtos1, nil
}

func (rsInfo0 *RSInfo) InsertRaceStateProtos(ctx context.Context, exec bob.Executor, related ...*RaceStateProtoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	raceStateProtos1, err := insertRSInfoRaceStateProtos0(ctx, exec, related, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.RaceStateProtos = append(rsInfo0.R.RaceStateProtos, raceStateProtos1...)

	for _, rel := range raceStateProtos1 {
		rel.R.RSInfo = rsInfo0
	}
	return nil
}

func (rsInfo0 *RSInfo) AttachRaceStateProtos(ctx context.Context, exec bob.Executor, related ...*RaceStateProto) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	raceStateProtos1 := RaceStateProtoSlice(related)

	_, err = attachRSInfoRaceStateProtos0(ctx, exec, len(related), raceStateProtos1, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.RaceStateProtos = append(rsInfo0.R.RaceStateProtos, raceStateProtos1...)

	for _, rel := range related {
		rel.R.RSInfo = rsInfo0
	}

	return nil
}

func attachRSInfoEvent0(ctx context.Context, exec bob.Executor, count int, rsInfo0 *RSInfo, event1 *Event) (*RSInfo, error) {
	setter := &RSInfoSetter{
		EventID: omit.From(event1.ID),
	}

	err := rsInfo0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachRSInfoEvent0: %w", err)
	}

	return rsInfo0, nil
}

func (rsInfo0 *RSInfo) InsertEvent(ctx context.Context, exec bob.Executor, related *EventSetter) error {
	event1, err := Events.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachRSInfoEvent0(ctx, exec, 1, rsInfo0, event1)
	if err != nil {
		return err
	}

	rsInfo0.R.Event = event1

	event1.R.RSInfos = append(event1.R.RSInfos, rsInfo0)

	return nil
}

func (rsInfo0 *RSInfo) AttachEvent(ctx context.Context, exec bob.Executor, event1 *Event) error {
	var err error

	_, err = attachRSInfoEvent0(ctx, exec, 1, rsInfo0, event1)
	if err != nil {
		return err
	}

	rsInfo0.R.Event = event1

	event1.R.RSInfos = append(event1.R.RSInfos, rsInfo0)

	return nil
}

func insertRSInfoSpeedmapProtos0(ctx context.Context, exec bob.Executor, speedmapProtos1 []*SpeedmapProtoSetter, rsInfo0 *RSInfo) (SpeedmapProtoSlice, error) {
	for i := range speedmapProtos1 {
		speedmapProtos1[i].RSInfoID = omit.From(rsInfo0.ID)
	}

	ret, err := SpeedmapProtos.Insert(bob.ToMods(speedmapProtos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertRSInfoSpeedmapProtos0: %w", err)
	}

	return ret, nil
}

func attachRSInfoSpeedmapProtos0(ctx context.Context, exec bob.Executor, count int, speedmapProtos1 SpeedmapProtoSlice, rsInfo0 *RSInfo) (SpeedmapProtoSlice, error) {
	setter := &SpeedmapProtoSetter{
		RSInfoID: omit.From(rsInfo0.ID),
	}

	err := speedmapProtos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachRSInfoSpeedmapProtos0: %w", err)
	}

	return speedmapProtos1, nil
}

func (rsInfo0 *RSInfo) InsertSpeedmapProtos(ctx context.Context, exec bob.Executor, related ...*SpeedmapProtoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	speedmapProtos1, err := insertRSInfoSpeedmapProtos0(ctx, exec, related, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.SpeedmapProtos = append(rsInfo0.R.SpeedmapProtos, speedmapProtos1...)

	for _, rel := range speedmapProtos1 {
		rel.R.RSInfo = rsInfo0
	}
	return nil
}

func (rsInfo0 *RSInfo) AttachSpeedmapProtos(ctx context.Context, exec bob.Executor, related ...*SpeedmapProto) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	speedmapProtos1 := SpeedmapProtoSlice(related)

	_, err = attachRSInfoSpeedmapProtos0(ctx, exec, len(related), speedmapProtos1, rsInfo0)
	if err != nil {
		return err
	}

	rsInfo0.R.SpeedmapProtos = append(rsInfo0.R.SpeedmapProtos, speedmapProtos1...)

	for _, rel := range related {
		rel.R.RSInfo = rsInfo0
	}

	return nil
}
