// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	mytypes "github.com/mpapenbr/iracelog-service-manager-go/pkg/db/mytypes"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Track is an object representing the database table.
type Track struct {
	ID            int32               `db:"id,pk" `
	Name          string              `db:"name" `
	ShortName     string              `db:"short_name" `
	Config        string              `db:"config" `
	TrackLength   decimal.Decimal     `db:"track_length" `
	Sectors       mytypes.SectorSlice `db:"sectors" `
	PitSpeed      decimal.Decimal     `db:"pit_speed" `
	PitEntry      decimal.Decimal     `db:"pit_entry" `
	PitExit       decimal.Decimal     `db:"pit_exit" `
	PitLaneLength decimal.Decimal     `db:"pit_lane_length" `

	R trackR `db:"-" `
}

// TrackSlice is an alias for a slice of pointers to Track.
// This should almost always be used instead of []*Track.
type TrackSlice []*Track

// Tracks contains methods to work with the track table
var Tracks = psql.NewTablex[*Track, TrackSlice, *TrackSetter]("", "track", buildTrackColumns("track"))

// TracksQuery is a query on the track table
type TracksQuery = *psql.ViewQuery[*Track, TrackSlice]

// trackR is where relationships are stored.
type trackR struct {
	Events EventSlice // event.event_track_id_fkey
}

func buildTrackColumns(alias string) trackColumns {
	return trackColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "name", "short_name", "config", "track_length", "sectors", "pit_speed", "pit_entry", "pit_exit", "pit_lane_length",
		).WithParent("track"),
		tableAlias:    alias,
		ID:            psql.Quote(alias, "id"),
		Name:          psql.Quote(alias, "name"),
		ShortName:     psql.Quote(alias, "short_name"),
		Config:        psql.Quote(alias, "config"),
		TrackLength:   psql.Quote(alias, "track_length"),
		Sectors:       psql.Quote(alias, "sectors"),
		PitSpeed:      psql.Quote(alias, "pit_speed"),
		PitEntry:      psql.Quote(alias, "pit_entry"),
		PitExit:       psql.Quote(alias, "pit_exit"),
		PitLaneLength: psql.Quote(alias, "pit_lane_length"),
	}
}

type trackColumns struct {
	expr.ColumnsExpr
	tableAlias    string
	ID            psql.Expression
	Name          psql.Expression
	ShortName     psql.Expression
	Config        psql.Expression
	TrackLength   psql.Expression
	Sectors       psql.Expression
	PitSpeed      psql.Expression
	PitEntry      psql.Expression
	PitExit       psql.Expression
	PitLaneLength psql.Expression
}

func (c trackColumns) Alias() string {
	return c.tableAlias
}

func (trackColumns) AliasedAs(alias string) trackColumns {
	return buildTrackColumns(alias)
}

// TrackSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TrackSetter struct {
	ID            omit.Val[int32]               `db:"id,pk" `
	Name          omit.Val[string]              `db:"name" `
	ShortName     omit.Val[string]              `db:"short_name" `
	Config        omit.Val[string]              `db:"config" `
	TrackLength   omit.Val[decimal.Decimal]     `db:"track_length" `
	Sectors       omit.Val[mytypes.SectorSlice] `db:"sectors" `
	PitSpeed      omit.Val[decimal.Decimal]     `db:"pit_speed" `
	PitEntry      omit.Val[decimal.Decimal]     `db:"pit_entry" `
	PitExit       omit.Val[decimal.Decimal]     `db:"pit_exit" `
	PitLaneLength omit.Val[decimal.Decimal]     `db:"pit_lane_length" `
}

func (s TrackSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	if s.ShortName.IsValue() {
		vals = append(vals, "short_name")
	}
	if s.Config.IsValue() {
		vals = append(vals, "config")
	}
	if s.TrackLength.IsValue() {
		vals = append(vals, "track_length")
	}
	if s.Sectors.IsValue() {
		vals = append(vals, "sectors")
	}
	if s.PitSpeed.IsValue() {
		vals = append(vals, "pit_speed")
	}
	if s.PitEntry.IsValue() {
		vals = append(vals, "pit_entry")
	}
	if s.PitExit.IsValue() {
		vals = append(vals, "pit_exit")
	}
	if s.PitLaneLength.IsValue() {
		vals = append(vals, "pit_lane_length")
	}
	return vals
}

func (s TrackSetter) Overwrite(t *Track) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
	if s.ShortName.IsValue() {
		t.ShortName = s.ShortName.MustGet()
	}
	if s.Config.IsValue() {
		t.Config = s.Config.MustGet()
	}
	if s.TrackLength.IsValue() {
		t.TrackLength = s.TrackLength.MustGet()
	}
	if s.Sectors.IsValue() {
		t.Sectors = s.Sectors.MustGet()
	}
	if s.PitSpeed.IsValue() {
		t.PitSpeed = s.PitSpeed.MustGet()
	}
	if s.PitEntry.IsValue() {
		t.PitEntry = s.PitEntry.MustGet()
	}
	if s.PitExit.IsValue() {
		t.PitExit = s.PitExit.MustGet()
	}
	if s.PitLaneLength.IsValue() {
		t.PitLaneLength = s.PitLaneLength.MustGet()
	}
}

func (s *TrackSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Tracks.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name.IsValue() {
			vals[1] = psql.Arg(s.Name.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.ShortName.IsValue() {
			vals[2] = psql.Arg(s.ShortName.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Config.IsValue() {
			vals[3] = psql.Arg(s.Config.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.TrackLength.IsValue() {
			vals[4] = psql.Arg(s.TrackLength.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Sectors.IsValue() {
			vals[5] = psql.Arg(s.Sectors.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.PitSpeed.IsValue() {
			vals[6] = psql.Arg(s.PitSpeed.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.PitEntry.IsValue() {
			vals[7] = psql.Arg(s.PitEntry.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.PitExit.IsValue() {
			vals[8] = psql.Arg(s.PitExit.MustGet())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if s.PitLaneLength.IsValue() {
			vals[9] = psql.Arg(s.PitLaneLength.MustGet())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TrackSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TrackSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.ShortName.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "short_name")...),
			psql.Arg(s.ShortName),
		}})
	}

	if s.Config.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "config")...),
			psql.Arg(s.Config),
		}})
	}

	if s.TrackLength.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "track_length")...),
			psql.Arg(s.TrackLength),
		}})
	}

	if s.Sectors.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "sectors")...),
			psql.Arg(s.Sectors),
		}})
	}

	if s.PitSpeed.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pit_speed")...),
			psql.Arg(s.PitSpeed),
		}})
	}

	if s.PitEntry.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pit_entry")...),
			psql.Arg(s.PitEntry),
		}})
	}

	if s.PitExit.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pit_exit")...),
			psql.Arg(s.PitExit),
		}})
	}

	if s.PitLaneLength.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pit_lane_length")...),
			psql.Arg(s.PitLaneLength),
		}})
	}

	return exprs
}

// FindTrack retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTrack(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Track, error) {
	if len(cols) == 0 {
		return Tracks.Query(
			sm.Where(Tracks.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Tracks.Query(
		sm.Where(Tracks.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(Tracks.Columns.Only(cols...)),
	).One(ctx, exec)
}

// TrackExists checks the presence of a single record by primary key
func TrackExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Tracks.Query(
		sm.Where(Tracks.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Track is retrieved from the database
func (o *Track) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tracks.AfterSelectHooks.RunHooks(ctx, exec, TrackSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Tracks.AfterInsertHooks.RunHooks(ctx, exec, TrackSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Tracks.AfterUpdateHooks.RunHooks(ctx, exec, TrackSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Tracks.AfterDeleteHooks.RunHooks(ctx, exec, TrackSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Track
func (o *Track) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Track) pkEQ() dialect.Expression {
	return psql.Quote("track", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Track
func (o *Track) Update(ctx context.Context, exec bob.Executor, s *TrackSetter) error {
	v, err := Tracks.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Track record with an executor
func (o *Track) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Tracks.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Track using the executor
func (o *Track) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Tracks.Query(
		sm.Where(Tracks.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TrackSlice is retrieved from the database
func (o TrackSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tracks.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Tracks.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Tracks.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Tracks.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TrackSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("track", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TrackSlice) copyMatchingRows(from ...*Track) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TrackSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tracks.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Track:
				o.copyMatchingRows(retrieved)
			case []*Track:
				o.copyMatchingRows(retrieved...)
			case TrackSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Track or a slice of Track
				// then run the AfterUpdateHooks on the slice
				_, err = Tracks.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TrackSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tracks.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Track:
				o.copyMatchingRows(retrieved)
			case []*Track:
				o.copyMatchingRows(retrieved...)
			case TrackSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Track or a slice of Track
				// then run the AfterDeleteHooks on the slice
				_, err = Tracks.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TrackSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TrackSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tracks.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TrackSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tracks.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TrackSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Tracks.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Events starts a query for related objects on event
func (o *Track) Events(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(Events.Columns.TrackID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TrackSlice) Events(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return Events.Query(append(mods,
		sm.Where(psql.Group(Events.Columns.TrackID).OP("IN", PKArgExpr)),
	)...)
}

func insertTrackEvents0(ctx context.Context, exec bob.Executor, events1 []*EventSetter, track0 *Track) (EventSlice, error) {
	for i := range events1 {
		events1[i].TrackID = omit.From(track0.ID)
	}

	ret, err := Events.Insert(bob.ToMods(events1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertTrackEvents0: %w", err)
	}

	return ret, nil
}

func attachTrackEvents0(ctx context.Context, exec bob.Executor, count int, events1 EventSlice, track0 *Track) (EventSlice, error) {
	setter := &EventSetter{
		TrackID: omit.From(track0.ID),
	}

	err := events1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachTrackEvents0: %w", err)
	}

	return events1, nil
}

func (track0 *Track) InsertEvents(ctx context.Context, exec bob.Executor, related ...*EventSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	events1, err := insertTrackEvents0(ctx, exec, related, track0)
	if err != nil {
		return err
	}

	track0.R.Events = append(track0.R.Events, events1...)

	for _, rel := range events1 {
		rel.R.Track = track0
	}
	return nil
}

func (track0 *Track) AttachEvents(ctx context.Context, exec bob.Executor, related ...*Event) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	events1 := EventSlice(related)

	_, err = attachTrackEvents0(ctx, exec, len(related), events1, track0)
	if err != nil {
		return err
	}

	track0.R.Events = append(track0.R.Events, events1...)

	for _, rel := range related {
		rel.R.Track = track0
	}

	return nil
}

type trackWhere[Q psql.Filterable] struct {
	ID            psql.WhereMod[Q, int32]
	Name          psql.WhereMod[Q, string]
	ShortName     psql.WhereMod[Q, string]
	Config        psql.WhereMod[Q, string]
	TrackLength   psql.WhereMod[Q, decimal.Decimal]
	Sectors       psql.WhereMod[Q, mytypes.SectorSlice]
	PitSpeed      psql.WhereMod[Q, decimal.Decimal]
	PitEntry      psql.WhereMod[Q, decimal.Decimal]
	PitExit       psql.WhereMod[Q, decimal.Decimal]
	PitLaneLength psql.WhereMod[Q, decimal.Decimal]
}

func (trackWhere[Q]) AliasedAs(alias string) trackWhere[Q] {
	return buildTrackWhere[Q](buildTrackColumns(alias))
}

func buildTrackWhere[Q psql.Filterable](cols trackColumns) trackWhere[Q] {
	return trackWhere[Q]{
		ID:            psql.Where[Q, int32](cols.ID),
		Name:          psql.Where[Q, string](cols.Name),
		ShortName:     psql.Where[Q, string](cols.ShortName),
		Config:        psql.Where[Q, string](cols.Config),
		TrackLength:   psql.Where[Q, decimal.Decimal](cols.TrackLength),
		Sectors:       psql.Where[Q, mytypes.SectorSlice](cols.Sectors),
		PitSpeed:      psql.Where[Q, decimal.Decimal](cols.PitSpeed),
		PitEntry:      psql.Where[Q, decimal.Decimal](cols.PitEntry),
		PitExit:       psql.Where[Q, decimal.Decimal](cols.PitExit),
		PitLaneLength: psql.Where[Q, decimal.Decimal](cols.PitLaneLength),
	}
}

func (o *Track) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Events":
		rels, ok := retrieved.(EventSlice)
		if !ok {
			return fmt.Errorf("track cannot load %T as %q", retrieved, name)
		}

		o.R.Events = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Track = o
			}
		}
		return nil
	default:
		return fmt.Errorf("track has no relationship %q", name)
	}
}

type trackPreloader struct{}

func buildTrackPreloader() trackPreloader {
	return trackPreloader{}
}

type trackThenLoader[Q orm.Loadable] struct {
	Events func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildTrackThenLoader[Q orm.Loadable]() trackThenLoader[Q] {
	type EventsLoadInterface interface {
		LoadEvents(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return trackThenLoader[Q]{
		Events: thenLoadBuilder[Q](
			"Events",
			func(ctx context.Context, exec bob.Executor, retrieved EventsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEvents(ctx, exec, mods...)
			},
		),
	}
}

// LoadEvents loads the track's Events into the .R struct
func (o *Track) LoadEvents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Events = nil

	related, err := o.Events(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Track = o
	}

	o.R.Events = related
	return nil
}

// LoadEvents loads the track's Events into the .R struct
func (os TrackSlice) LoadEvents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Events(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.Events = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range events {

			if !(o.ID == rel.TrackID) {
				continue
			}

			rel.R.Track = o

			o.R.Events = append(o.R.Events, rel)
		}
	}

	return nil
}

type trackJoins[Q dialect.Joinable] struct {
	typ    string
	Events modAs[Q, eventColumns]
}

func (j trackJoins[Q]) aliasedAs(alias string) trackJoins[Q] {
	return buildTrackJoins[Q](buildTrackColumns(alias), j.typ)
}

func buildTrackJoins[Q dialect.Joinable](cols trackColumns, typ string) trackJoins[Q] {
	return trackJoins[Q]{
		typ: typ,
		Events: modAs[Q, eventColumns]{
			c: Events.Columns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.TrackID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
