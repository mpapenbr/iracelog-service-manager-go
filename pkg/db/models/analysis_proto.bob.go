// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// AnalysisProto is an object representing the database table.
type AnalysisProto struct {
	EventID int32 `db:"event_id,pk" `
	// Timestamp when data was persisted
	RecordStamp time.Time `db:"record_stamp" `
	Protodata   []byte    `db:"protodata" `

	R analysisProtoR `db:"-" `
}

// AnalysisProtoSlice is an alias for a slice of pointers to AnalysisProto.
// This should almost always be used instead of []*AnalysisProto.
type AnalysisProtoSlice []*AnalysisProto

// AnalysisProtos contains methods to work with the analysis_proto table
var AnalysisProtos = psql.NewTablex[*AnalysisProto, AnalysisProtoSlice, *AnalysisProtoSetter]("", "analysis_proto", buildAnalysisProtoColumns("analysis_proto"))

// AnalysisProtosQuery is a query on the analysis_proto table
type AnalysisProtosQuery = *psql.ViewQuery[*AnalysisProto, AnalysisProtoSlice]

// analysisProtoR is where relationships are stored.
type analysisProtoR struct {
	Event *Event // analysis_proto.analysis_proto_event_id_fkey
}

func buildAnalysisProtoColumns(alias string) analysisProtoColumns {
	return analysisProtoColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"event_id", "record_stamp", "protodata",
		).WithParent("analysis_proto"),
		tableAlias:  alias,
		EventID:     psql.Quote(alias, "event_id"),
		RecordStamp: psql.Quote(alias, "record_stamp"),
		Protodata:   psql.Quote(alias, "protodata"),
	}
}

type analysisProtoColumns struct {
	expr.ColumnsExpr
	tableAlias  string
	EventID     psql.Expression
	RecordStamp psql.Expression
	Protodata   psql.Expression
}

func (c analysisProtoColumns) Alias() string {
	return c.tableAlias
}

func (analysisProtoColumns) AliasedAs(alias string) analysisProtoColumns {
	return buildAnalysisProtoColumns(alias)
}

// AnalysisProtoSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AnalysisProtoSetter struct {
	EventID     omit.Val[int32]     `db:"event_id,pk" `
	RecordStamp omit.Val[time.Time] `db:"record_stamp" `
	Protodata   omit.Val[[]byte]    `db:"protodata" `
}

func (s AnalysisProtoSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if s.EventID.IsValue() {
		vals = append(vals, "event_id")
	}
	if s.RecordStamp.IsValue() {
		vals = append(vals, "record_stamp")
	}
	if s.Protodata.IsValue() {
		vals = append(vals, "protodata")
	}
	return vals
}

func (s AnalysisProtoSetter) Overwrite(t *AnalysisProto) {
	if s.EventID.IsValue() {
		t.EventID = s.EventID.MustGet()
	}
	if s.RecordStamp.IsValue() {
		t.RecordStamp = s.RecordStamp.MustGet()
	}
	if s.Protodata.IsValue() {
		t.Protodata = s.Protodata.MustGet()
	}
}

func (s *AnalysisProtoSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return AnalysisProtos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 3)
		if s.EventID.IsValue() {
			vals[0] = psql.Arg(s.EventID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.RecordStamp.IsValue() {
			vals[1] = psql.Arg(s.RecordStamp.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Protodata.IsValue() {
			vals[2] = psql.Arg(s.Protodata.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s AnalysisProtoSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s AnalysisProtoSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if s.EventID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "event_id")...),
			psql.Arg(s.EventID),
		}})
	}

	if s.RecordStamp.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "record_stamp")...),
			psql.Arg(s.RecordStamp),
		}})
	}

	if s.Protodata.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "protodata")...),
			psql.Arg(s.Protodata),
		}})
	}

	return exprs
}

// FindAnalysisProto retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAnalysisProto(ctx context.Context, exec bob.Executor, EventIDPK int32, cols ...string) (*AnalysisProto, error) {
	if len(cols) == 0 {
		return AnalysisProtos.Query(
			sm.Where(AnalysisProtos.Columns.EventID.EQ(psql.Arg(EventIDPK))),
		).One(ctx, exec)
	}

	return AnalysisProtos.Query(
		sm.Where(AnalysisProtos.Columns.EventID.EQ(psql.Arg(EventIDPK))),
		sm.Columns(AnalysisProtos.Columns.Only(cols...)),
	).One(ctx, exec)
}

// AnalysisProtoExists checks the presence of a single record by primary key
func AnalysisProtoExists(ctx context.Context, exec bob.Executor, EventIDPK int32) (bool, error) {
	return AnalysisProtos.Query(
		sm.Where(AnalysisProtos.Columns.EventID.EQ(psql.Arg(EventIDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after AnalysisProto is retrieved from the database
func (o *AnalysisProto) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AnalysisProtos.AfterSelectHooks.RunHooks(ctx, exec, AnalysisProtoSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = AnalysisProtos.AfterInsertHooks.RunHooks(ctx, exec, AnalysisProtoSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = AnalysisProtos.AfterUpdateHooks.RunHooks(ctx, exec, AnalysisProtoSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = AnalysisProtos.AfterDeleteHooks.RunHooks(ctx, exec, AnalysisProtoSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the AnalysisProto
func (o *AnalysisProto) primaryKeyVals() bob.Expression {
	return psql.Arg(o.EventID)
}

func (o *AnalysisProto) pkEQ() dialect.Expression {
	return psql.Quote("analysis_proto", "event_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the AnalysisProto
func (o *AnalysisProto) Update(ctx context.Context, exec bob.Executor, s *AnalysisProtoSetter) error {
	v, err := AnalysisProtos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single AnalysisProto record with an executor
func (o *AnalysisProto) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := AnalysisProtos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the AnalysisProto using the executor
func (o *AnalysisProto) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AnalysisProtos.Query(
		sm.Where(AnalysisProtos.Columns.EventID.EQ(psql.Arg(o.EventID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after AnalysisProtoSlice is retrieved from the database
func (o AnalysisProtoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AnalysisProtos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = AnalysisProtos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = AnalysisProtos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = AnalysisProtos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o AnalysisProtoSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("analysis_proto", "event_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o AnalysisProtoSlice) copyMatchingRows(from ...*AnalysisProto) {
	for i, old := range o {
		for _, new := range from {
			if new.EventID != old.EventID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o AnalysisProtoSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AnalysisProtos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AnalysisProto:
				o.copyMatchingRows(retrieved)
			case []*AnalysisProto:
				o.copyMatchingRows(retrieved...)
			case AnalysisProtoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AnalysisProto or a slice of AnalysisProto
				// then run the AfterUpdateHooks on the slice
				_, err = AnalysisProtos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o AnalysisProtoSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AnalysisProtos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AnalysisProto:
				o.copyMatchingRows(retrieved)
			case []*AnalysisProto:
				o.copyMatchingRows(retrieved...)
			case AnalysisProtoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AnalysisProto or a slice of AnalysisProto
				// then run the AfterDeleteHooks on the slice
				_, err = AnalysisProtos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o AnalysisProtoSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AnalysisProtoSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AnalysisProtos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o AnalysisProtoSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AnalysisProtos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o AnalysisProtoSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := AnalysisProtos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Event starts a query for related objects on event
func (o *AnalysisProto) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(Events.Columns.ID.EQ(psql.Arg(o.EventID))),
	)...)
}

func (os AnalysisProtoSlice) Event(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	pkEventID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkEventID = append(pkEventID, o.EventID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkEventID), "integer[]")),
	))

	return Events.Query(append(mods,
		sm.Where(psql.Group(Events.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachAnalysisProtoEvent0(ctx context.Context, exec bob.Executor, count int, analysisProto0 *AnalysisProto, event1 *Event) (*AnalysisProto, error) {
	setter := &AnalysisProtoSetter{
		EventID: omit.From(event1.ID),
	}

	err := analysisProto0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachAnalysisProtoEvent0: %w", err)
	}

	return analysisProto0, nil
}

func (analysisProto0 *AnalysisProto) InsertEvent(ctx context.Context, exec bob.Executor, related *EventSetter) error {
	event1, err := Events.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachAnalysisProtoEvent0(ctx, exec, 1, analysisProto0, event1)
	if err != nil {
		return err
	}

	analysisProto0.R.Event = event1

	event1.R.AnalysisProto = analysisProto0

	return nil
}

func (analysisProto0 *AnalysisProto) AttachEvent(ctx context.Context, exec bob.Executor, event1 *Event) error {
	var err error

	_, err = attachAnalysisProtoEvent0(ctx, exec, 1, analysisProto0, event1)
	if err != nil {
		return err
	}

	analysisProto0.R.Event = event1

	event1.R.AnalysisProto = analysisProto0

	return nil
}

type analysisProtoWhere[Q psql.Filterable] struct {
	EventID     psql.WhereMod[Q, int32]
	RecordStamp psql.WhereMod[Q, time.Time]
	Protodata   psql.WhereMod[Q, []byte]
}

func (analysisProtoWhere[Q]) AliasedAs(alias string) analysisProtoWhere[Q] {
	return buildAnalysisProtoWhere[Q](buildAnalysisProtoColumns(alias))
}

func buildAnalysisProtoWhere[Q psql.Filterable](cols analysisProtoColumns) analysisProtoWhere[Q] {
	return analysisProtoWhere[Q]{
		EventID:     psql.Where[Q, int32](cols.EventID),
		RecordStamp: psql.Where[Q, time.Time](cols.RecordStamp),
		Protodata:   psql.Where[Q, []byte](cols.Protodata),
	}
}

func (o *AnalysisProto) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Event":
		rel, ok := retrieved.(*Event)
		if !ok {
			return fmt.Errorf("analysisProto cannot load %T as %q", retrieved, name)
		}

		o.R.Event = rel

		if rel != nil {
			rel.R.AnalysisProto = o
		}
		return nil
	default:
		return fmt.Errorf("analysisProto has no relationship %q", name)
	}
}

type analysisProtoPreloader struct {
	Event func(...psql.PreloadOption) psql.Preloader
}

func buildAnalysisProtoPreloader() analysisProtoPreloader {
	return analysisProtoPreloader{
		Event: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Event, EventSlice](psql.PreloadRel{
				Name: "Event",
				Sides: []psql.PreloadSide{
					{
						From:        AnalysisProtos,
						To:          Events,
						FromColumns: []string{"event_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Events.Columns.Names(), opts...)
		},
	}
}

type analysisProtoThenLoader[Q orm.Loadable] struct {
	Event func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildAnalysisProtoThenLoader[Q orm.Loadable]() analysisProtoThenLoader[Q] {
	type EventLoadInterface interface {
		LoadEvent(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return analysisProtoThenLoader[Q]{
		Event: thenLoadBuilder[Q](
			"Event",
			func(ctx context.Context, exec bob.Executor, retrieved EventLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEvent(ctx, exec, mods...)
			},
		),
	}
}

// LoadEvent loads the analysisProto's Event into the .R struct
func (o *AnalysisProto) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Event = nil

	related, err := o.Event(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AnalysisProto = o

	o.R.Event = related
	return nil
}

// LoadEvent loads the analysisProto's Event into the .R struct
func (os AnalysisProtoSlice) LoadEvent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Event(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range events {

			if !(o.EventID == rel.ID) {
				continue
			}

			rel.R.AnalysisProto = o

			o.R.Event = rel
			break
		}
	}

	return nil
}

type analysisProtoJoins[Q dialect.Joinable] struct {
	typ   string
	Event modAs[Q, eventColumns]
}

func (j analysisProtoJoins[Q]) aliasedAs(alias string) analysisProtoJoins[Q] {
	return buildAnalysisProtoJoins[Q](buildAnalysisProtoColumns(alias), j.typ)
}

func buildAnalysisProtoJoins[Q dialect.Joinable](cols analysisProtoColumns, typ string) analysisProtoJoins[Q] {
	return analysisProtoJoins[Q]{
		typ: typ,
		Event: modAs[Q, eventColumns]{
			c: Events.Columns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.ID.EQ(cols.EventID),
					))
				}

				return mods
			},
		},
	}
}
