// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
)

var (
	SelectWhere     = Where[*dialect.SelectQuery]()
	UpdateWhere     = Where[*dialect.UpdateQuery]()
	DeleteWhere     = Where[*dialect.DeleteQuery]()
	OnConflictWhere = Where[*clause.ConflictClause]() // Used in ON CONFLICT DO UPDATE
)

func Where[Q psql.Filterable]() struct {
	AnalysisProtos   analysisProtoWhere[Q]
	CCars            cCarWhere[Q]
	CCarClasses      cCarClassWhere[Q]
	CCarDrivers      cCarDriverWhere[Q]
	CCarEntries      cCarEntryWhere[Q]
	CCarTeams        cCarTeamWhere[Q]
	CarStateProtos   carStateProtoWhere[Q]
	Events           eventWhere[Q]
	EventExts        eventExtWhere[Q]
	MSGStateProtos   msgStateProtoWhere[Q]
	RaceStateProtos  raceStateProtoWhere[Q]
	RSInfos          rsInfoWhere[Q]
	SchemaMigrations schemaMigrationWhere[Q]
	SpeedmapProtos   speedmapProtoWhere[Q]
	Tenants          tenantWhere[Q]
	Tracks           trackWhere[Q]
} {
	return struct {
		AnalysisProtos   analysisProtoWhere[Q]
		CCars            cCarWhere[Q]
		CCarClasses      cCarClassWhere[Q]
		CCarDrivers      cCarDriverWhere[Q]
		CCarEntries      cCarEntryWhere[Q]
		CCarTeams        cCarTeamWhere[Q]
		CarStateProtos   carStateProtoWhere[Q]
		Events           eventWhere[Q]
		EventExts        eventExtWhere[Q]
		MSGStateProtos   msgStateProtoWhere[Q]
		RaceStateProtos  raceStateProtoWhere[Q]
		RSInfos          rsInfoWhere[Q]
		SchemaMigrations schemaMigrationWhere[Q]
		SpeedmapProtos   speedmapProtoWhere[Q]
		Tenants          tenantWhere[Q]
		Tracks           trackWhere[Q]
	}{
		AnalysisProtos:   buildAnalysisProtoWhere[Q](AnalysisProtos.Columns),
		CCars:            buildCCarWhere[Q](CCars.Columns),
		CCarClasses:      buildCCarClassWhere[Q](CCarClasses.Columns),
		CCarDrivers:      buildCCarDriverWhere[Q](CCarDrivers.Columns),
		CCarEntries:      buildCCarEntryWhere[Q](CCarEntries.Columns),
		CCarTeams:        buildCCarTeamWhere[Q](CCarTeams.Columns),
		CarStateProtos:   buildCarStateProtoWhere[Q](CarStateProtos.Columns),
		Events:           buildEventWhere[Q](Events.Columns),
		EventExts:        buildEventExtWhere[Q](EventExts.Columns),
		MSGStateProtos:   buildMSGStateProtoWhere[Q](MSGStateProtos.Columns),
		RaceStateProtos:  buildRaceStateProtoWhere[Q](RaceStateProtos.Columns),
		RSInfos:          buildRSInfoWhere[Q](RSInfos.Columns),
		SchemaMigrations: buildSchemaMigrationWhere[Q](SchemaMigrations.Columns),
		SpeedmapProtos:   buildSpeedmapProtoWhere[Q](SpeedmapProtos.Columns),
		Tenants:          buildTenantWhere[Q](Tenants.Columns),
		Tracks:           buildTrackWhere[Q](Tracks.Columns),
	}
}
