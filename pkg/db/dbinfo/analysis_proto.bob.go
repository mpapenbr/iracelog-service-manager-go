// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var AnalysisProtos = Table[
	analysisProtoColumns,
	analysisProtoIndexes,
	analysisProtoForeignKeys,
	analysisProtoUniques,
	analysisProtoChecks,
]{
	Schema: "",
	Name:   "analysis_proto",
	Columns: analysisProtoColumns{
		EventID: column{
			Name:      "event_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		RecordStamp: column{
			Name:      "record_stamp",
			DBType:    "timestamp with time zone",
			Default:   "now()",
			Comment:   "Timestamp when data was persisted",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Protodata: column{
			Name:      "protodata",
			DBType:    "bytea",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: analysisProtoIndexes{
		AnalysisProtoPkey: index{
			Type: "btree",
			Name: "analysis_proto_pkey",
			Columns: []indexColumn{
				{
					Name:         "event_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "analysis_proto_pkey",
		Columns: []string{"event_id"},
		Comment: "",
	},
	ForeignKeys: analysisProtoForeignKeys{
		AnalysisProtoAnalysisProtoEventIDFkey: foreignKey{
			constraint: constraint{
				Name:    "analysis_proto.analysis_proto_event_id_fkey",
				Columns: []string{"event_id"},
				Comment: "",
			},
			ForeignTable:   "event",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "Analysis data in binary protobuf format",
}

type analysisProtoColumns struct {
	EventID     column
	RecordStamp column
	Protodata   column
}

func (c analysisProtoColumns) AsSlice() []column {
	return []column{
		c.EventID, c.RecordStamp, c.Protodata,
	}
}

type analysisProtoIndexes struct {
	AnalysisProtoPkey index
}

func (i analysisProtoIndexes) AsSlice() []index {
	return []index{
		i.AnalysisProtoPkey,
	}
}

type analysisProtoForeignKeys struct {
	AnalysisProtoAnalysisProtoEventIDFkey foreignKey
}

func (f analysisProtoForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.AnalysisProtoAnalysisProtoEventIDFkey,
	}
}

type analysisProtoUniques struct{}

func (u analysisProtoUniques) AsSlice() []constraint {
	return []constraint{}
}

type analysisProtoChecks struct{}

func (c analysisProtoChecks) AsSlice() []check {
	return []check{}
}
