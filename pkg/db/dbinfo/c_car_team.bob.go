// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var CCarTeams = Table[
	cCarTeamColumns,
	cCarTeamIndexes,
	cCarTeamForeignKeys,
	cCarTeamUniques,
	cCarTeamChecks,
]{
	Schema: "",
	Name:   "c_car_team",
	Columns: cCarTeamColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('c_car_team_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CCarEntryID: column{
			Name:      "c_car_entry_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TeamID: column{
			Name:      "team_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: cCarTeamIndexes{
		CCarTeamPkey: index{
			Type: "btree",
			Name: "c_car_team_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "c_car_team_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: cCarTeamForeignKeys{
		CCarTeamCCarTeamCarEntryIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car_team.c_car_team_car_entry_id_fkey",
				Columns: []string{"c_car_entry_id"},
				Comment: "",
			},
			ForeignTable:   "c_car_entry",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type cCarTeamColumns struct {
	ID          column
	CCarEntryID column
	TeamID      column
	Name        column
}

func (c cCarTeamColumns) AsSlice() []column {
	return []column{
		c.ID, c.CCarEntryID, c.TeamID, c.Name,
	}
}

type cCarTeamIndexes struct {
	CCarTeamPkey index
}

func (i cCarTeamIndexes) AsSlice() []index {
	return []index{
		i.CCarTeamPkey,
	}
}

type cCarTeamForeignKeys struct {
	CCarTeamCCarTeamCarEntryIDFkey foreignKey
}

func (f cCarTeamForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.CCarTeamCCarTeamCarEntryIDFkey,
	}
}

type cCarTeamUniques struct{}

func (u cCarTeamUniques) AsSlice() []constraint {
	return []constraint{}
}

type cCarTeamChecks struct{}

func (c cCarTeamChecks) AsSlice() []check {
	return []check{}
}
