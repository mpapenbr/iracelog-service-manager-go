// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var CCars = Table[
	cCarColumns,
	cCarIndexes,
	cCarForeignKeys,
	cCarUniques,
	cCarChecks,
]{
	Schema: "",
	Name:   "c_car",
	Columns: cCarColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('c_car_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		EventID: column{
			Name:      "event_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NameShort: column{
			Name:      "name_short",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CarID: column{
			Name:      "car_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CCarClassID: column{
			Name:      "c_car_class_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		FuelPCT: column{
			Name:      "fuel_pct",
			DBType:    "numeric",
			Default:   "1",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PowerAdjust: column{
			Name:      "power_adjust",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		WeightPenalty: column{
			Name:      "weight_penalty",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		DryTireSets: column{
			Name:      "dry_tire_sets",
			DBType:    "integer",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: cCarIndexes{
		CCarPkey: index{
			Type: "btree",
			Name: "c_car_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "c_car_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: cCarForeignKeys{
		CCarCCarClassIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car.c_car_class_id_fkey",
				Columns: []string{"c_car_class_id"},
				Comment: "",
			},
			ForeignTable:   "c_car_class",
			ForeignColumns: []string{"id"},
		},
		CCarCCarEventIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car.c_car_event_id_fkey",
				Columns: []string{"event_id"},
				Comment: "",
			},
			ForeignTable:   "event",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type cCarColumns struct {
	ID            column
	EventID       column
	Name          column
	NameShort     column
	CarID         column
	CCarClassID   column
	FuelPCT       column
	PowerAdjust   column
	WeightPenalty column
	DryTireSets   column
}

func (c cCarColumns) AsSlice() []column {
	return []column{
		c.ID, c.EventID, c.Name, c.NameShort, c.CarID, c.CCarClassID, c.FuelPCT, c.PowerAdjust, c.WeightPenalty, c.DryTireSets,
	}
}

type cCarIndexes struct {
	CCarPkey index
}

func (i cCarIndexes) AsSlice() []index {
	return []index{
		i.CCarPkey,
	}
}

type cCarForeignKeys struct {
	CCarCCarClassIDFkey foreignKey
	CCarCCarEventIDFkey foreignKey
}

func (f cCarForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.CCarCCarClassIDFkey, f.CCarCCarEventIDFkey,
	}
}

type cCarUniques struct{}

func (u cCarUniques) AsSlice() []constraint {
	return []constraint{}
}

type cCarChecks struct{}

func (c cCarChecks) AsSlice() []check {
	return []check{}
}
