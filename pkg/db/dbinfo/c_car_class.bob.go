// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var CCarClasses = Table[
	cCarClassColumns,
	cCarClassIndexes,
	cCarClassForeignKeys,
	cCarClassUniques,
	cCarClassChecks,
]{
	Schema: "",
	Name:   "c_car_class",
	Columns: cCarClassColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('c_car_class_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		EventID: column{
			Name:      "event_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CarClassID: column{
			Name:      "car_class_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: cCarClassIndexes{
		CCarClassPkey: index{
			Type: "btree",
			Name: "c_car_class_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "c_car_class_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: cCarClassForeignKeys{
		CCarClassCCarClassEventIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car_class.c_car_class_event_id_fkey",
				Columns: []string{"event_id"},
				Comment: "",
			},
			ForeignTable:   "event",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type cCarClassColumns struct {
	ID         column
	EventID    column
	Name       column
	CarClassID column
}

func (c cCarClassColumns) AsSlice() []column {
	return []column{
		c.ID, c.EventID, c.Name, c.CarClassID,
	}
}

type cCarClassIndexes struct {
	CCarClassPkey index
}

func (i cCarClassIndexes) AsSlice() []index {
	return []index{
		i.CCarClassPkey,
	}
}

type cCarClassForeignKeys struct {
	CCarClassCCarClassEventIDFkey foreignKey
}

func (f cCarClassForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.CCarClassCCarClassEventIDFkey,
	}
}

type cCarClassUniques struct{}

func (u cCarClassUniques) AsSlice() []constraint {
	return []constraint{}
}

type cCarClassChecks struct{}

func (c cCarClassChecks) AsSlice() []check {
	return []check{}
}
