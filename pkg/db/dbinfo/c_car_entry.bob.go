// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var CCarEntries = Table[
	cCarEntryColumns,
	cCarEntryIndexes,
	cCarEntryForeignKeys,
	cCarEntryUniques,
	cCarEntryChecks,
]{
	Schema: "",
	Name:   "c_car_entry",
	Columns: cCarEntryColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('c_car_entry_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		EventID: column{
			Name:      "event_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CCarID: column{
			Name:      "c_car_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CarIdx: column{
			Name:      "car_idx",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CarNumber: column{
			Name:      "car_number",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CarNumberRaw: column{
			Name:      "car_number_raw",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: cCarEntryIndexes{
		CCarEntryPkey: index{
			Type: "btree",
			Name: "c_car_entry_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "c_car_entry_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: cCarEntryForeignKeys{
		CCarEntryCCarEntryCarIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car_entry.c_car_entry_car_id_fkey",
				Columns: []string{"c_car_id"},
				Comment: "",
			},
			ForeignTable:   "c_car",
			ForeignColumns: []string{"id"},
		},
		CCarEntryCCarEntryEventIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car_entry.c_car_entry_event_id_fkey",
				Columns: []string{"event_id"},
				Comment: "",
			},
			ForeignTable:   "event",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type cCarEntryColumns struct {
	ID           column
	EventID      column
	CCarID       column
	CarIdx       column
	CarNumber    column
	CarNumberRaw column
}

func (c cCarEntryColumns) AsSlice() []column {
	return []column{
		c.ID, c.EventID, c.CCarID, c.CarIdx, c.CarNumber, c.CarNumberRaw,
	}
}

type cCarEntryIndexes struct {
	CCarEntryPkey index
}

func (i cCarEntryIndexes) AsSlice() []index {
	return []index{
		i.CCarEntryPkey,
	}
}

type cCarEntryForeignKeys struct {
	CCarEntryCCarEntryCarIDFkey   foreignKey
	CCarEntryCCarEntryEventIDFkey foreignKey
}

func (f cCarEntryForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.CCarEntryCCarEntryCarIDFkey, f.CCarEntryCCarEntryEventIDFkey,
	}
}

type cCarEntryUniques struct{}

func (u cCarEntryUniques) AsSlice() []constraint {
	return []constraint{}
}

type cCarEntryChecks struct{}

func (c cCarEntryChecks) AsSlice() []check {
	return []check{}
}
