// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Events = Table[
	eventColumns,
	eventIndexes,
	eventForeignKeys,
	eventUniques,
	eventChecks,
]{
	Schema: "",
	Name:   "event",
	Columns: eventColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('event_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		EventKey: column{
			Name:      "event_key",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Description: column{
			Name:      "description",
			DBType:    "character varying",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		EventTime: column{
			Name:      "event_time",
			DBType:    "timestamp with time zone",
			Default:   "now()",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		RaceloggerVersion: column{
			Name:      "racelogger_version",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TeamRacing: column{
			Name:      "team_racing",
			DBType:    "boolean",
			Default:   "false",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		MultiClass: column{
			Name:      "multi_class",
			DBType:    "boolean",
			Default:   "false",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NumCarTypes: column{
			Name:      "num_car_types",
			DBType:    "integer",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NumCarClasses: column{
			Name:      "num_car_classes",
			DBType:    "integer",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IrSessionID: column{
			Name:      "ir_session_id",
			DBType:    "integer",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		TrackID: column{
			Name:      "track_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PitSpeed: column{
			Name:      "pit_speed",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ReplayMinTimestamp: column{
			Name:      "replay_min_timestamp",
			DBType:    "timestamp with time zone",
			Default:   "now()",
			Comment:   "timestamp of the race start",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ReplayMinSessionTime: column{
			Name:      "replay_min_session_time",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "session time of the race start",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ReplayMaxSessionTime: column{
			Name:      "replay_max_session_time",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "session time of the race end",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Sessions: column{
			Name:      "sessions",
			DBType:    "jsonb",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IrSubSessionID: column{
			Name:      "ir_sub_session_id",
			DBType:    "integer",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TenantID: column{
			Name:      "tenant_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TireInfos: column{
			Name:      "tire_infos",
			DBType:    "jsonb",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: eventIndexes{
		EventPkey: index{
			Type: "btree",
			Name: "event_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		EventEventKeyKey: index{
			Type: "btree",
			Name: "event_event_key_key",
			Columns: []indexColumn{
				{
					Name:         "event_key",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "event_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: eventForeignKeys{
		EventEventTenantIDFK: foreignKey{
			constraint: constraint{
				Name:    "event.event_tenant_id_fk",
				Columns: []string{"tenant_id"},
				Comment: "",
			},
			ForeignTable:   "tenant",
			ForeignColumns: []string{"id"},
		},
		EventEventTrackIDFkey: foreignKey{
			constraint: constraint{
				Name:    "event.event_track_id_fkey",
				Columns: []string{"track_id"},
				Comment: "",
			},
			ForeignTable:   "track",
			ForeignColumns: []string{"id"},
		},
	},
	Uniques: eventUniques{
		EventEventKeyKey: constraint{
			Name:    "event_event_key_key",
			Columns: []string{"event_key"},
			Comment: "",
		},
	},

	Comment: "Information about a recorded event",
}

type eventColumns struct {
	ID                   column
	EventKey             column
	Name                 column
	Description          column
	EventTime            column
	RaceloggerVersion    column
	TeamRacing           column
	MultiClass           column
	NumCarTypes          column
	NumCarClasses        column
	IrSessionID          column
	TrackID              column
	PitSpeed             column
	ReplayMinTimestamp   column
	ReplayMinSessionTime column
	ReplayMaxSessionTime column
	Sessions             column
	IrSubSessionID       column
	TenantID             column
	TireInfos            column
}

func (c eventColumns) AsSlice() []column {
	return []column{
		c.ID, c.EventKey, c.Name, c.Description, c.EventTime, c.RaceloggerVersion, c.TeamRacing, c.MultiClass, c.NumCarTypes, c.NumCarClasses, c.IrSessionID, c.TrackID, c.PitSpeed, c.ReplayMinTimestamp, c.ReplayMinSessionTime, c.ReplayMaxSessionTime, c.Sessions, c.IrSubSessionID, c.TenantID, c.TireInfos,
	}
}

type eventIndexes struct {
	EventPkey        index
	EventEventKeyKey index
}

func (i eventIndexes) AsSlice() []index {
	return []index{
		i.EventPkey, i.EventEventKeyKey,
	}
}

type eventForeignKeys struct {
	EventEventTenantIDFK  foreignKey
	EventEventTrackIDFkey foreignKey
}

func (f eventForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.EventEventTenantIDFK, f.EventEventTrackIDFkey,
	}
}

type eventUniques struct {
	EventEventKeyKey constraint
}

func (u eventUniques) AsSlice() []constraint {
	return []constraint{
		u.EventEventKeyKey,
	}
}

type eventChecks struct{}

func (c eventChecks) AsSlice() []check {
	return []check{}
}
