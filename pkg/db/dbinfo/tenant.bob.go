// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Tenants = Table[
	tenantColumns,
	tenantIndexes,
	tenantForeignKeys,
	tenantUniques,
	tenantChecks,
]{
	Schema: "",
	Name:   "tenant",
	Columns: tenantColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('tenant_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ExternalID: column{
			Name:      "external_id",
			DBType:    "uuid",
			Default:   "",
			Comment:   "for external use",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		APIKey: column{
			Name:      "api_key",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Active: column{
			Name:      "active",
			DBType:    "boolean",
			Default:   "false",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: tenantIndexes{
		TenantPkey: index{
			Type: "btree",
			Name: "tenant_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		TenantAPIKeyUnique: index{
			Type: "btree",
			Name: "tenant_api_key_unique",
			Columns: []indexColumn{
				{
					Name:         "api_key",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		TenantExternalIDUnique: index{
			Type: "btree",
			Name: "tenant_external_id_unique",
			Columns: []indexColumn{
				{
					Name:         "external_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		TenantNameUnique: index{
			Type: "btree",
			Name: "tenant_name_unique",
			Columns: []indexColumn{
				{
					Name:         "name",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "tenant_pkey",
		Columns: []string{"id"},
		Comment: "",
	},

	Uniques: tenantUniques{
		TenantAPIKeyUnique: constraint{
			Name:    "tenant_api_key_unique",
			Columns: []string{"api_key"},
			Comment: "",
		},
		TenantExternalIDUnique: constraint{
			Name:    "tenant_external_id_unique",
			Columns: []string{"external_id"},
			Comment: "",
		},
		TenantNameUnique: constraint{
			Name:    "tenant_name_unique",
			Columns: []string{"name"},
			Comment: "",
		},
	},

	Comment: "Information about a tenant",
}

type tenantColumns struct {
	ID         column
	ExternalID column
	Name       column
	APIKey     column
	Active     column
}

func (c tenantColumns) AsSlice() []column {
	return []column{
		c.ID, c.ExternalID, c.Name, c.APIKey, c.Active,
	}
}

type tenantIndexes struct {
	TenantPkey             index
	TenantAPIKeyUnique     index
	TenantExternalIDUnique index
	TenantNameUnique       index
}

func (i tenantIndexes) AsSlice() []index {
	return []index{
		i.TenantPkey, i.TenantAPIKeyUnique, i.TenantExternalIDUnique, i.TenantNameUnique,
	}
}

type tenantForeignKeys struct{}

func (f tenantForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type tenantUniques struct {
	TenantAPIKeyUnique     constraint
	TenantExternalIDUnique constraint
	TenantNameUnique       constraint
}

func (u tenantUniques) AsSlice() []constraint {
	return []constraint{
		u.TenantAPIKeyUnique, u.TenantExternalIDUnique, u.TenantNameUnique,
	}
}

type tenantChecks struct{}

func (c tenantChecks) AsSlice() []check {
	return []check{}
}
