// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Tracks = Table[
	trackColumns,
	trackIndexes,
	trackForeignKeys,
	trackUniques,
	trackChecks,
]{
	Schema: "",
	Name:   "track",
	Columns: trackColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('track_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ShortName: column{
			Name:      "short_name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Config: column{
			Name:      "config",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TrackLength: column{
			Name:      "track_length",
			DBType:    "numeric",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Sectors: column{
			Name:      "sectors",
			DBType:    "jsonb",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PitSpeed: column{
			Name:      "pit_speed",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PitEntry: column{
			Name:      "pit_entry",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PitExit: column{
			Name:      "pit_exit",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		PitLaneLength: column{
			Name:      "pit_lane_length",
			DBType:    "numeric",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: trackIndexes{
		TrackPkey: index{
			Type: "btree",
			Name: "track_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "track_pkey",
		Columns: []string{"id"},
		Comment: "",
	},

	Comment: "",
}

type trackColumns struct {
	ID            column
	Name          column
	ShortName     column
	Config        column
	TrackLength   column
	Sectors       column
	PitSpeed      column
	PitEntry      column
	PitExit       column
	PitLaneLength column
}

func (c trackColumns) AsSlice() []column {
	return []column{
		c.ID, c.Name, c.ShortName, c.Config, c.TrackLength, c.Sectors, c.PitSpeed, c.PitEntry, c.PitExit, c.PitLaneLength,
	}
}

type trackIndexes struct {
	TrackPkey index
}

func (i trackIndexes) AsSlice() []index {
	return []index{
		i.TrackPkey,
	}
}

type trackForeignKeys struct{}

func (f trackForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type trackUniques struct{}

func (u trackUniques) AsSlice() []constraint {
	return []constraint{}
}

type trackChecks struct{}

func (c trackChecks) AsSlice() []check {
	return []check{}
}
