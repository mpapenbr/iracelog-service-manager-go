// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var CCarDrivers = Table[
	cCarDriverColumns,
	cCarDriverIndexes,
	cCarDriverForeignKeys,
	cCarDriverUniques,
	cCarDriverChecks,
]{
	Schema: "",
	Name:   "c_car_driver",
	Columns: cCarDriverColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('c_car_driver_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CCarEntryID: column{
			Name:      "c_car_entry_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		DriverID: column{
			Name:      "driver_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Initials: column{
			Name:      "initials",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		AbbrevName: column{
			Name:      "abbrev_name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Irating: column{
			Name:      "irating",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		LicLevel: column{
			Name:      "lic_level",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		LicSubLevel: column{
			Name:      "lic_sub_level",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		LicString: column{
			Name:      "lic_string",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: cCarDriverIndexes{
		CCarDriverPkey: index{
			Type: "btree",
			Name: "c_car_driver_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "c_car_driver_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: cCarDriverForeignKeys{
		CCarDriverCCarDriverCarEntryIDFkey: foreignKey{
			constraint: constraint{
				Name:    "c_car_driver.c_car_driver_car_entry_id_fkey",
				Columns: []string{"c_car_entry_id"},
				Comment: "",
			},
			ForeignTable:   "c_car_entry",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type cCarDriverColumns struct {
	ID          column
	CCarEntryID column
	DriverID    column
	Name        column
	Initials    column
	AbbrevName  column
	Irating     column
	LicLevel    column
	LicSubLevel column
	LicString   column
}

func (c cCarDriverColumns) AsSlice() []column {
	return []column{
		c.ID, c.CCarEntryID, c.DriverID, c.Name, c.Initials, c.AbbrevName, c.Irating, c.LicLevel, c.LicSubLevel, c.LicString,
	}
}

type cCarDriverIndexes struct {
	CCarDriverPkey index
}

func (i cCarDriverIndexes) AsSlice() []index {
	return []index{
		i.CCarDriverPkey,
	}
}

type cCarDriverForeignKeys struct {
	CCarDriverCCarDriverCarEntryIDFkey foreignKey
}

func (f cCarDriverForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.CCarDriverCCarDriverCarEntryIDFkey,
	}
}

type cCarDriverUniques struct{}

func (u cCarDriverUniques) AsSlice() []constraint {
	return []constraint{}
}

type cCarDriverChecks struct{}

func (c cCarDriverChecks) AsSlice() []check {
	return []check{}
}
