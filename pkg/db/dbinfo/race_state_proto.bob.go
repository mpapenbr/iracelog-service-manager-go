// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var RaceStateProtos = Table[
	raceStateProtoColumns,
	raceStateProtoIndexes,
	raceStateProtoForeignKeys,
	raceStateProtoUniques,
	raceStateProtoChecks,
]{
	Schema: "",
	Name:   "race_state_proto",
	Columns: raceStateProtoColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('race_state_proto_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		RSInfoID: column{
			Name:      "rs_info_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Protodata: column{
			Name:      "protodata",
			DBType:    "bytea",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: raceStateProtoIndexes{
		RaceStateProtoPkey: index{
			Type: "btree",
			Name: "race_state_proto_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		RaceStateRSInfoIdx: index{
			Type: "btree",
			Name: "race_state_rs_info_idx",
			Columns: []indexColumn{
				{
					Name:         "rs_info_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        false,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "race_state_proto_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: raceStateProtoForeignKeys{
		RaceStateProtoRaceStateProtoRSInfoIDFkey: foreignKey{
			constraint: constraint{
				Name:    "race_state_proto.race_state_proto_rs_info_id_fkey",
				Columns: []string{"rs_info_id"},
				Comment: "",
			},
			ForeignTable:   "rs_info",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type raceStateProtoColumns struct {
	ID        column
	RSInfoID  column
	Protodata column
}

func (c raceStateProtoColumns) AsSlice() []column {
	return []column{
		c.ID, c.RSInfoID, c.Protodata,
	}
}

type raceStateProtoIndexes struct {
	RaceStateProtoPkey index
	RaceStateRSInfoIdx index
}

func (i raceStateProtoIndexes) AsSlice() []index {
	return []index{
		i.RaceStateProtoPkey, i.RaceStateRSInfoIdx,
	}
}

type raceStateProtoForeignKeys struct {
	RaceStateProtoRaceStateProtoRSInfoIDFkey foreignKey
}

func (f raceStateProtoForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.RaceStateProtoRaceStateProtoRSInfoIDFkey,
	}
}

type raceStateProtoUniques struct{}

func (u raceStateProtoUniques) AsSlice() []constraint {
	return []constraint{}
}

type raceStateProtoChecks struct{}

func (c raceStateProtoChecks) AsSlice() []check {
	return []check{}
}
