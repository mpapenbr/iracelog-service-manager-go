// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var RSInfos = Table[
	rsInfoColumns,
	rsInfoIndexes,
	rsInfoForeignKeys,
	rsInfoUniques,
	rsInfoChecks,
]{
	Schema: "",
	Name:   "rs_info",
	Columns: rsInfoColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('rs_info_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		EventID: column{
			Name:      "event_id",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		RecordStamp: column{
			Name:      "record_stamp",
			DBType:    "timestamp with time zone",
			Default:   "now()",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		SessionTime: column{
			Name:      "session_time",
			DBType:    "numeric",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TimeOfDay: column{
			Name:      "time_of_day",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		AirTemp: column{
			Name:      "air_temp",
			DBType:    "numeric",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TrackTemp: column{
			Name:      "track_temp",
			DBType:    "numeric",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TrackWetness: column{
			Name:      "track_wetness",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Precipitation: column{
			Name:      "precipitation",
			DBType:    "numeric",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		SessionNum: column{
			Name:      "session_num",
			DBType:    "integer",
			Default:   "0",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: rsInfoIndexes{
		RSInfoPkey: index{
			Type: "btree",
			Name: "rs_info_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
		RSInfoEventIDIdx: index{
			Type: "btree",
			Name: "rs_info_event_id_idx",
			Columns: []indexColumn{
				{
					Name:         "event_id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        false,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "rs_info_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: rsInfoForeignKeys{
		RSInfoRSInfoEventIDFkey: foreignKey{
			constraint: constraint{
				Name:    "rs_info.rs_info_event_id_fkey",
				Columns: []string{"event_id"},
				Comment: "",
			},
			ForeignTable:   "event",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "Shared information for a recorded race state",
}

type rsInfoColumns struct {
	ID            column
	EventID       column
	RecordStamp   column
	SessionTime   column
	TimeOfDay     column
	AirTemp       column
	TrackTemp     column
	TrackWetness  column
	Precipitation column
	SessionNum    column
}

func (c rsInfoColumns) AsSlice() []column {
	return []column{
		c.ID, c.EventID, c.RecordStamp, c.SessionTime, c.TimeOfDay, c.AirTemp, c.TrackTemp, c.TrackWetness, c.Precipitation, c.SessionNum,
	}
}

type rsInfoIndexes struct {
	RSInfoPkey       index
	RSInfoEventIDIdx index
}

func (i rsInfoIndexes) AsSlice() []index {
	return []index{
		i.RSInfoPkey, i.RSInfoEventIDIdx,
	}
}

type rsInfoForeignKeys struct {
	RSInfoRSInfoEventIDFkey foreignKey
}

func (f rsInfoForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.RSInfoRSInfoEventIDFkey,
	}
}

type rsInfoUniques struct{}

func (u rsInfoUniques) AsSlice() []constraint {
	return []constraint{}
}

type rsInfoChecks struct{}

func (c rsInfoChecks) AsSlice() []check {
	return []check{}
}
