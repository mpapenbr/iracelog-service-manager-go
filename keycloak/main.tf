# --- OpenTofu and Provider Configuration ---
terraform {
  required_providers {
    keycloak = {
      source  = "keycloak/keycloak"
      version = "5.4.0"
    }
  }
}

# Provider configuration using environment variables for sensitive data
# It is assumed that Keycloak admin credentials will be provided via
# variables (defined below) or environment variables.
provider "keycloak" {
  url       = var.keycloak_url
  username  = var.keycloak_user
  password  = var.keycloak_password
  client_id = "admin-cli" # Common default for password grant
}

# --- Variables (recommended for sensitive data) ---
variable "keycloak_url" {
  description = "The Keycloak URL (e.g., http://localhost:9080)"
  type        = string
  sensitive   = true
}

variable "keycloak_user" {
  description = "Keycloak admin username for provider authentication"
  type        = string
  sensitive   = true
}

variable "keycloak_password" {
  description = "Keycloak admin password for provider authentication"
  type        = string
  sensitive   = true
}

# --- Keycloak Realm: demo ---
resource "keycloak_realm" "demo" {
  realm   = "demo"
  enabled = true
  # Note: here we can (and should) use go duration notation
  sso_session_idle_timeout = "30m"
  access_token_lifespan    = "1m"
  # we want one-way refresh tokens - don't resuse them
  revoke_refresh_token    = "true"
  refresh_token_max_reuse = 0
}


# --- Keycloak Client: backend-for-frontend ---
resource "keycloak_openid_client" "backend_for_frontend" {
  realm_id  = keycloak_realm.demo.id
  client_id = "backend-for-frontend"
  name      = "Backend for Frontend"
  enabled   = true

  # Set up for Authorization Code Flow
  standard_flow_enabled        = true
  direct_access_grants_enabled = true
  client_secret                = "secret"

  # Set up for Confidential Connection
  access_type = "CONFIDENTIAL"


  # unlike the realm resource setting we can't use duration here
  # instead we have to provide the value in seconds
  access_token_lifespan       = "15"
  client_session_idle_timeout = "40"


  # Define a placeholder redirect URI (essential for auth code flow)
  valid_redirect_uris = ["http://localhost:8084/*", "http://localhost:8085/*"]

  # The client_secret will be auto-generated by Keycloak if not provided.
  # We will output the generated secret.
}

# --- Keycloak Role: user ---
resource "keycloak_role" "user" {
  realm_id    = keycloak_realm.demo.id
  name        = "user"
  description = "Standard user role"
}
# --- Keycloak Role: editor ---
resource "keycloak_role" "editor" {
  realm_id    = keycloak_realm.demo.id
  name        = "editor"
  description = "Editor role with permissions to edit content"
}
# --- Keycloak Role: admin ---
resource "keycloak_role" "admin" {
  realm_id    = keycloak_realm.demo.id
  name        = "admin"
  description = "Administrator role with full permissions"
}

resource "keycloak_default_roles" "default_roles" {
  realm_id      = keycloak_realm.demo.id
  default_roles = ["user"]
}

# --- Keycloak Role: editor for tenant_1---
resource "keycloak_role" "editor_tenant_1" {
  realm_id    = keycloak_realm.demo.id
  name        = "editor_tenant_1"
  description = "Editor role with permissions to edit content"
  attributes = {
    tenantID = "1"
  }
}
# --- Keycloak Role: editor for tenant_2---
resource "keycloak_role" "editor_tenant_2" {
  realm_id    = keycloak_realm.demo.id
  name        = "editor_tenant_2"
  description = "Editor role with permissions to edit content"
  attributes = {
    tenantID = "2"
  }
}

# --- Keycloak Group: tenant_1 ---
resource "keycloak_group" "tenant_1" {
  realm_id = keycloak_realm.demo.id
  name     = "tenant_1"
  attributes = {
    description = "Group for Tenant 1"
  }
}
# --- Keycloak Group: tenant_2 ---
resource "keycloak_group" "tenant_2" {
  realm_id = keycloak_realm.demo.id
  name     = "tenant_2"
  attributes = {
    description = "Group for Tenant 2"
  }
}

# --- Keycloak User: admin ---
resource "keycloak_user" "admin" {
  realm_id       = keycloak_realm.demo.id
  username       = "admin"
  enabled        = true
  email          = "admin@example.com"
  first_name     = "Admin"
  last_name      = "User"
  email_verified = true
  initial_password {
    value     = "admin" # Initial password (will be overridden below)
    temporary = false   # User will not be forced to change the password
  }
}

# --- Assign Role to User: admin
resource "keycloak_user_roles" "admin_role_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.admin.id
  exhaustive = false

  role_ids = [
    keycloak_role.admin.id
  ]
}

# --- Keycloak User: user ---
resource "keycloak_user" "user" {
  realm_id       = keycloak_realm.demo.id
  username       = "user"
  enabled        = true
  email          = "user@example.com"
  first_name     = "Standard"
  last_name      = "User"
  email_verified = true
  initial_password {
    value     = "pwd" # Initial password (will be overridden below)
    temporary = false # User will not be forced to change the password
  }

}
# --- Keycloak User: usert1 ---
resource "keycloak_user" "usert1" {
  realm_id       = keycloak_realm.demo.id
  username       = "usert1"
  enabled        = true
  email          = "usert1@example.com"
  first_name     = "Edit"
  last_name      = "User"
  email_verified = true
  initial_password {
    value     = "pwd" # Initial password (will be overridden below)
    temporary = false # User will not be forced to change the password
  }

}

# --- Assign Group to User: usert1
resource "keycloak_user_groups" "usert1_group_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.usert1.id
  exhaustive = false

  group_ids = [
    keycloak_group.tenant_1.id
  ]
}
# --- Assign Role to User: usert1
resource "keycloak_user_roles" "usert1_role_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.usert1.id
  exhaustive = false

  role_ids = [
    keycloak_role.editor_tenant_1.id
  ]
}

# --- Keycloak User: usert2 ---
resource "keycloak_user" "usert2" {
  realm_id       = keycloak_realm.demo.id
  username       = "usert2"
  enabled        = true
  email          = "usert2@example.com"
  first_name     = "Edit2"
  last_name      = "User"
  email_verified = true
  initial_password {
    value     = "pwd" # Initial password (will be overridden below)
    temporary = false # User will not be forced to change the password
  }

}

# --- Assign Group to User: usert2
resource "keycloak_user_groups" "usert2_group_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.usert2.id
  exhaustive = false

  group_ids = [
    keycloak_group.tenant_2.id
  ]
}
# --- Assign Role to User: usert2
resource "keycloak_user_roles" "usert2_role_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.usert2.id
  exhaustive = false

  role_ids = [
    keycloak_role.editor_tenant_2.id
  ]
}

# --- Keycloak User: usert3 ---
resource "keycloak_user" "usert3" {
  realm_id       = keycloak_realm.demo.id
  username       = "usert3"
  enabled        = true
  email          = "usert3@example.com"
  first_name     = "Edit3"
  last_name      = "User"
  email_verified = true
  initial_password {
    value     = "pwd" # Initial password (will be overridden below)
    temporary = false # User will not be forced to change the password
  }

}

# --- Assign Group to User: usert3
resource "keycloak_user_groups" "usert3_group_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.usert3.id
  exhaustive = false

  group_ids = [
    keycloak_group.tenant_1.id,
    keycloak_group.tenant_2.id
  ]
}
# --- Assign Role to User: usert3
resource "keycloak_user_roles" "usert3_role_association" {
  realm_id   = keycloak_realm.demo.id
  user_id    = keycloak_user.usert3.id
  exhaustive = false

  role_ids = [
    keycloak_role.editor_tenant_1.id,
    keycloak_role.editor_tenant_2.id
  ]
}



# --- Outputs (to retrieve generated secret) ---

output "client_secret_backend_for_frontend" {
  description = "The secret for the backend-for-frontend client (access_type=confidential)"
  value       = keycloak_openid_client.backend_for_frontend.client_secret
  sensitive   = true
}

output "realm_name" {
  description = "The name of the created Keycloak Realm"
  value       = keycloak_realm.demo.realm
}
